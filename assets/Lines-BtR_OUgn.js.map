{"version":3,"file":"Lines-BtR_OUgn.js","sources":["../../src/lib/components/Plots/Scatter/index.ts","../../src/lib/components/Plots/Line/Line/useDatumFocus.ts","../../src/lib/components/Plots/Line/Line/usePathCreator.ts","../../src/lib/components/Plots/Line/Line/useTooltip.ts","../../src/lib/components/Plots/Line/Line/LineBase.tsx","../../src/lib/components/Plots/Line/Line/Line.tsx","../../src/lib/components/Plots/Line/Lines.tsx"],"sourcesContent":["export * from \"./Scatter\";\nexport * from \"./Scatters\";\n","import { eventSelectors, IState, line } from \"@chart-io/core\";\n\nimport { useSelector, useStore } from \"react-redux\";\nimport { useEffect } from \"react\";\n\ninterface IDatumFocusProps extends Omit<line.ILineFocusProps, \"layer\" | \"dispatch\" | \"eventMode\" | \"position\"> {\n    /**\n     * The layer we're updating to from a React useRef\n     */\n    layer: React.MutableRefObject<Element>;\n    /**\n     * Whether the plot is interactive\n     */\n    interactive: boolean;\n}\n\n/**\n * Responds to events from an event layer to focus the nearest datum\n */\nexport function useDatumFocus({ interactive, layer, x, y, xScale, yScale, data, color }: IDatumFocusProps) {\n    const { dispatch } = useStore();\n    const eventMode = useSelector((s: IState) => eventSelectors.mode(s));\n    const position = useSelector((s: IState) => eventSelectors.position(s));\n\n    /* If possible respond to global mouse events for tooltips etc */\n    useEffect(() => {\n        if (interactive) {\n            return line.focus({\n                dispatch,\n                x,\n                y,\n                color,\n                xScale,\n                yScale,\n                position,\n                data,\n                eventMode,\n                layer: layer.current,\n            });\n        }\n    }, [xScale, yScale, x, y, position.x, position.y, interactive, color, data, dispatch, eventMode, layer]);\n}\n","import { d3 } from \"@chart-io/core\";\nimport type { IScale } from \"@chart-io/core\";\n\nimport { useEffect } from \"react\";\n\n/**\n * Creates an SVG path in the DOM positioned at the bottom of the Axis\n * so we can animate smoothly from 0\n * @param  layer      The layer we're updating to from a React useRef\n * @param  x          The key of the field used for the x position\n * @param  y          The key of the field used for the y position\n * @param  xScale     The d3 scale for the x axis\n * @param  yScale     The d3 scale for the y axis\n */\nexport function usePathCreator(\n    layer: React.MutableRefObject<Element>,\n    x: string,\n    y: string,\n    xScale: IScale,\n    yScale: IScale,\n) {\n    useEffect(() => {\n        // Ensure that we've got the SVG group to render to\n        if (!layer.current) {\n            return;\n        }\n\n        // Cleanup the DOM if the scales have been removed as we\n        // have no idea where to draw a line\n        if (!xScale || !yScale) {\n            d3.select(layer.current).selectAll(\"*\").remove();\n            return;\n        }\n\n        const current = layer.current;\n        const line = d3\n            .line()\n            .x((d) => xScale(d[x]) + bandwidth)\n            .y((d) => yScale(d[y]));\n\n        // @ts-expect-error: We handle a missing bandwidth fine\n        const bandwidth = xScale.bandwidth ? xScale.bandwidth() / 2 : 0;\n\n        // Only ever add the path once on first render when\n        // we've got the minimum bits required\n        d3.select(current)\n            .append(\"path\")\n            .datum([\n                { [x]: xScale.domain()[0], [y]: yScale.domain()[0] },\n                { [x]: xScale.domain()[xScale.domain().length - 1], [y]: yScale.domain()[0] },\n            ])\n            .attr(\"class\", \"line\")\n            .style(\"fill\", \"none\")\n            .style(\"pointer-events\", \"none\")\n            // @ts-ignore: TODO: Fix this\n            .attr(\"d\", line);\n\n        // Do not include the scales in here. While they need\n        // to be used for the first render, we never want to\n        // update this line even if the scales change.\n        //\n        // The fact that the plot is called via an withXYPlot provides\n        // enough safety around the scales being null on first render\n    }, [layer, x, y]);\n}\n","import { eventSelectors, IState, line } from \"@chart-io/core\";\n\nimport { useSelector, useStore } from \"react-redux\";\nimport { useEffect } from \"react\";\n\ninterface ITooltipProps extends Omit<line.ILineTooltipProps, \"layer\" | \"dispatch\" | \"eventMode\" | \"position\"> {\n    /**\n     * The layer we're updating to from a React useRef\n     */\n    layer: React.MutableRefObject<Element>;\n    /**\n     * Whether the plot is interactive\n     */\n    interactive: boolean;\n}\n\n/**\n * Responds to events from an event layer to show Tooltips\n */\nexport function useTooltip({ layer, interactive, x, y, xScale, yScale, data, color }: ITooltipProps) {\n    const { dispatch } = useStore();\n    const eventMode = useSelector((s: IState) => eventSelectors.mode(s));\n    const position = useSelector((s: IState) => eventSelectors.position(s));\n\n    /* If possible respond to global mouse events for tooltips etc */\n    useEffect(() => {\n        if (interactive) {\n            return line.tooltip({\n                dispatch,\n                x,\n                y,\n                color,\n                xScale,\n                yScale,\n                position,\n                data,\n                layer: layer.current,\n                eventMode,\n            });\n        }\n    }, [dispatch, eventMode, position.x, position.y, xScale, yScale, x, y, data, layer, color]);\n}\n","import { chartSelectors, IState, line } from \"@chart-io/core\";\nimport { d3 } from \"@chart-io/core\";\nimport type { IPlotProps } from \"@chart-io/core\";\n\nimport { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { useLegendItem, useRender } from \"../../../../hooks\";\n\nimport { useDatumFocus } from \"./useDatumFocus\";\nimport { usePathCreator } from \"./usePathCreator\";\nimport { useTooltip } from \"./useTooltip\";\n\nexport function LineBase({\n    x,\n    y,\n    color,\n    scaleMode = \"plot\",\n    showInLegend = true,\n    interactive = true,\n    layer,\n    canvas,\n}: IPlotProps) {\n    const data = useSelector((s: IState) => chartSelectors.data(s));\n    const xScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, x, scaleMode));\n    const yScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, y, scaleMode));\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const width = useSelector((s: IState) => chartSelectors.dimensions.width(s));\n    const height = useSelector((s: IState) => chartSelectors.dimensions.height(s));\n    const animationDuration = useSelector((s: IState) => chartSelectors.animationDuration(s));\n\n    const seriesColor = color || theme.series.colors[0];\n    const sortedData = useMemo(() => data.toSorted((a, b) => d3.ascending(a[x], b[x])), [data, x]);\n\n    useLegendItem(y, \"line\", showInLegend, seriesColor);\n\n    // Used to create our initial path\n    usePathCreator(layer, x, y, xScale, yScale);\n\n    /* On future renders we want to update the path */\n    useRender(() => {\n        const props = { x, y, xScale, yScale, data: sortedData, color: seriesColor, theme };\n\n        // Handle Canvas rendering\n        if (canvas) {\n            return line.canvas.render({ ...props, height, width, canvas });\n        }\n\n        line.render({ ...props, layer: layer.current, animationDuration });\n    }, [x, y, sortedData, xScale, yScale, width, height, seriesColor, theme, layer, canvas, animationDuration]);\n\n    // If possible respond to global mouse events for tooltips etc\n    useDatumFocus({ layer, x, y, interactive, xScale, yScale, data: sortedData, color: seriesColor });\n    useTooltip({ layer, x, y, interactive, xScale, yScale, data: sortedData, color: seriesColor });\n}\n","import type { IPlotProps } from \"@chart-io/core\";\nimport React from \"react\";\n\nimport { withCanvas, withSVG, withXYPlot } from \"../../../../hoc\";\nimport { LineBase } from \"./LineBase\";\n\nexport interface ILineProps extends Omit<IPlotProps, \"layer\" | \"canvas\"> {\n    /**\n     * Should Canvas be used instead of SVG?\n     */\n    useCanvas?: boolean;\n}\n\nconst WrappedCanvasLine = withCanvas(withXYPlot<ILineProps>(LineBase), \"plot line\");\nconst WrappedSVGLine = withSVG(withXYPlot<ILineProps>(LineBase), \"plot line\");\n\n/**\n * Represents a Line plot\n * @param  props       The set of React properties\n * @return             The Line plot component\n */\nexport function Line({ useCanvas = false, ...props }: ILineProps) {\n    if (useCanvas) {\n        return <WrappedCanvasLine {...props} />;\n    }\n\n    return <WrappedSVGLine {...props} />;\n}\n\nLine.requiresVirtualCanvas = false;\nLine.isPlot = true;\nLine.brush = {\n    horizontal: true,\n    vertical: false,\n};\nLine.zoom = {\n    horizontal: true,\n    vertical: false,\n};\n","import { chartSelectors, IState } from \"@chart-io/core\";\nimport type { IPlotsProps } from \"@chart-io/core\";\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { Line } from \"./Line\";\n\nexport type ILinesProps = IPlotsProps;\n\n/**\n * Represents a set of Line Plots\n * @param  {Object} props       The set of React properties\n * @return {ReactDOMComponent}  The Line plot component\n */\nexport function Lines({ ys, colors, ...props }: ILinesProps) {\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const palette = colors || theme.series.colors;\n\n    return (\n        <React.Fragment>\n            {ys.map((y, i) => (\n                <Line {...props} key={y} y={y} color={palette[i]} />\n            ))}\n        </React.Fragment>\n    );\n}\n\nLines.requiresVirtualCanvas = false;\nLines.isPlot = true;\nLines.brush = {\n    horizontal: true,\n    vertical: false,\n};\nLines.zoom = {\n    horizontal: true,\n    vertical: false,\n};\n"],"names":["cov_15x2kesxxe","actualCoverage","useDatumFocus","interactive","layer","x","y","xScale","yScale","data","color","cov_1rucff65bu","f","dispatch","s","useStore","eventMode","useSelector","eventSelectors","mode","position","usePathCreator","useTooltip","cov_26yvuu33m8","cov_b9z91p6ob","path","hash","global","gcv","coverageData","coverage","LineBase","scaleMode","b","showInLegend","canvas","chartSelectors","scales","getScale","theme","width","dimensions","height","animationDuration","seriesColor","series","colors","sortedData","useMemo","toSorted","a","d3","ascending","useLegendItem","WrappedCanvasLine","cov_2mic76a0zf","withCanvas","withXYPlot","WrappedSVGLine","withSVG","Lines","ys","props","cov_11paceitcf","palette","jsx","React","Fragment","children","map","i","createElement","Line","key"],"mappings":"w+BAAA,OAAAA,EAAA,UAAA,CAAA,OAAAC,CAAA,EAAAA,CAAA,CAAAD,EAAA,y+ECqC6BE,EAAA,CAAAC,YAAAA,EAAAC,MAAAA,EAAAC,EAAAA,EAAAC,EAAAA,EAAAC,OAAAA,EAAAC,OAAAA,EAAAC,KAAAA,EAAAC,MAAAA,CAAA,EAAA,CAAAC,EAAAC,EAAAA,EAAA,CAAA,IAAA,KAChB,CAAAC,SAAAA,CAAA,GAAAF,EAAA,EAAAG,EAAAC,CAAAA,IAAAA,EACL,GAAAC,GAAAL,IAAAG,EAAA,CAAA,IAAAG,EAAAH,IAAAH,EAAA,EAAAC,EAAA,CAAA,IAAAD,EAAA,EAAAG,EAAAI,CAAAA,IAAAA,EAAAC,KAAAL,CAAA,EAAA,GACAM,GAAAT,EAAA,EAAAG,EAAA,CAAA,IAAgBG,EAAeH,IAAYH,EAAA,EAAAC,EAAA,CAAA,IAAAD,IAAAG,OAAAI,WAAuBJ,CAAA,EAAA,GAAAH,EAAAG,EAAAA,szHCK/D,SAAcO,EAENjB,EAEHC,EACJC,EAaLC,EACPC,mrGC3BgBc,EAAA,CAAAlB,MAAAA,EAAAD,YAAAA,EAAAE,EAAAA,EAAAC,EAAAA,EAAAC,OAAAA,EAAAC,OAAAA,EAAAC,KAAAA,EAAAC,MAAAA,CAAA,EAAA,CAAAa,EAAA,EAAAX,EAAA,CAAA,IAAA,KACH,CAAAC,SAAAA,CAAA,GAAAU,IAAAT,EAAA,CAAA,IAAAC,EAAA,GACLC,GAAAO,IAAAT,EAAAG,CAAAA,IAAAA,EAAAH,IAAAS,EAAAX,EAAAA,EAAAW,CAAAA,IAAAA,IAAAT,EAAA,CAAA,IAAAI,EAAAC,KAAAL,CAAA,EAAA,GACUM,GAAAG,EAAAT,EAAAA,EAAAG,CAAAA,IAAAA,MAAgCM,EAAA,EAAAX,OAAAW,EAAA,EAAAT,EAAAI,CAAAA,IAAAA,WAAsBJ,CAAG,EAAM,GAAAS,EAAA,EAAAT,EAAA,CAAA,oOChB7E,SAAAU,GAAA,CAAA,IAAAC,EAAA,qGAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,qGAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,WAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,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"}