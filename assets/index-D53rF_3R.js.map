{"version":3,"file":"index-D53rF_3R.js","sources":["../../src/lib/components/Crosshair/Crosshair.tsx"],"sourcesContent":["import { chartSelectors, eventSelectors, IState } from \"@chart-io/core\";\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nexport interface ICrosshairProps {\n    /**\n     * Should horizontal droplines be shown?\n     * @default true\n     */\n    showHorizontal?: boolean;\n\n    /**\n     * Should vertical droplines be shown?\n     * @default true\n     */\n    showVertical?: boolean;\n}\n\n/**\n * This component renders the droplines that are triggered from various plots\n * @return The Crosshair component\n */\nexport function Crosshair({ showVertical = true, showHorizontal = true }: ICrosshairProps) {\n    const left = useSelector((s: IState) => chartSelectors.dimensions.plot.left(s));\n    const top = useSelector((s: IState) => chartSelectors.dimensions.plot.top(s));\n    const plotHeight = useSelector((s: IState) => chartSelectors.dimensions.plot.height(s));\n    const plotWidth = useSelector((s: IState) => chartSelectors.dimensions.plot.width(s));\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const position = useSelector((s: IState) => eventSelectors.position(s));\n\n    if (!position.x && !position.y) {\n        return null;\n    }\n\n    const { x, y } = position;\n\n    return (\n        <>\n            {showHorizontal && (\n                <line\n                    x1={left}\n                    x2={left + plotWidth}\n                    y1={y}\n                    y2={y}\n                    stroke={`${theme.crosshair.stroke}`}\n                    strokeOpacity={theme.crosshair.strokeOpacity}\n                    strokeWidth={theme.crosshair.strokeWidth}\n                    strokeDasharray={theme.crosshair.strokeDasharray}\n                    style={{ pointerEvents: \"none\" }}\n                />\n            )}\n            {showVertical && (\n                <line\n                    x1={x}\n                    x2={x}\n                    y1={top}\n                    y2={top + plotHeight}\n                    stroke={`${theme.crosshair.stroke}`}\n                    strokeOpacity={theme.crosshair.strokeOpacity}\n                    strokeWidth={theme.crosshair.strokeWidth}\n                    strokeDasharray={theme.crosshair.strokeDasharray}\n                    style={{ pointerEvents: \"none\" }}\n                />\n            )}\n        </>\n    );\n}\n"],"names":["cov_1oa07ygvf6","path","hash","global","gcv","coverageData","coverage","actualCoverage","Crosshair","showVertical","b","showHorizontal","f","left","s","useSelector","chartSelectors","dimensions","plot","top","plotHeight","height","plotWidth","width","theme","position","eventSelectors","x","y","jsxs","Fragment","children","jsx","x1","x2","y1","y2","stroke","crosshair"],"mappings":"kJA4DiD,SAAAA,GAAA,CAAA,IAAAC,EAAA,gGAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,gGAAA,agBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,ccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,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"}