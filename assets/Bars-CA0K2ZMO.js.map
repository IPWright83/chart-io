{"version":3,"file":"Bars-CA0K2ZMO.js","sources":["../../src/lib/components/Plots/Bar/useTooltip.ts","../../src/lib/components/Plots/Bar/Bar/BarBase.tsx","../../src/lib/components/Plots/Bar/Bar/Bar.tsx","../../src/lib/components/Plots/Bar/Bar/index.ts","../../src/lib/components/Plots/Bar/StackedBar/StackedBarBase.tsx","../../src/lib/components/Plots/Bar/StackedBar/StackedBar.tsx","../../src/lib/components/Plots/Bar/StackedBar/index.ts","../../src/lib/components/Plots/Bar/GroupedBar/GroupedBarBase.tsx","../../src/lib/components/Plots/Bar/GroupedBar/GroupedBar.tsx","../../src/lib/components/Plots/Bar/GroupedBar/index.ts","../../src/lib/components/Plots/Bar/Bars.tsx"],"sourcesContent":["import { IColor, IDatum, IMouseEvent } from \"@chart-io/core\";\nimport { bar } from \"@chart-io/core\";\n\nimport { useEffect, useState } from \"react\";\nimport { useStore } from \"react-redux\";\n\ninterface ITooltipParams {\n    datum: IDatum;\n    event: IMouseEvent;\n    fillColors: IColor[];\n    xs: string[];\n}\n\n/**\n * Handles the user interacting with a DataPoint on the Column chart and the need to display a tooltip\n * @param  dispatch     The redux store dispatch function\n * @param  y            The key for the y value\n * @return              A function to set the tooltip datum\n */\nconst useTooltip = ({ y }: Omit<bar.IBarTooltipProps, \"dispatch\" | \"datum\" | \"colors\" | \"event\" | \"xs\">) => {\n    const { dispatch } = useStore();\n    const [datum, setDatum] = useState(null);\n    const [colors, setColors] = useState(null);\n    const [xs, setXs] = useState(null);\n    const [positionEvent, setPositionEvent] = useState(null);\n\n    useEffect(() => {\n        return bar.tooltip({ dispatch, datum, colors, event: positionEvent, xs, y });\n    }, [dispatch, colors, xs, y, positionEvent]);\n\n    /**\n     * A function to set the tooltip parameters\n     * @param  tooltipParams    The configuration for the tooltip\n     */\n    return (tooltipParams: ITooltipParams) => {\n        if (!tooltipParams) {\n            setDatum(undefined);\n            setColors(undefined);\n            setPositionEvent(undefined);\n            setXs(undefined);\n            return;\n        }\n\n        const { datum, event, fillColors, xs } = tooltipParams;\n\n        setColors(fillColors);\n        setPositionEvent(event);\n        setXs(xs);\n        setDatum(datum);\n    };\n};\n\nexport { useTooltip };\n","import { bar, chartSelectors, d3, IState } from \"@chart-io/core\";\nimport type { IEventPlotProps } from \"@chart-io/core\";\n\nimport { useSelector } from \"react-redux\";\n\nimport { useLegendItem, useRender } from \"../../../../hooks\";\n\nimport { renderCanvas } from \"../../renderCanvas\";\nimport { useFocused } from \"../useFocused\";\nimport { useTooltip } from \"../useTooltip\";\n\nexport interface IBarBaseProps extends IEventPlotProps {\n    /**\n     * This is an internally used function to allow the scatter plot to render to a virtual canvas\n     */\n    renderVirtualCanvas?: (update: d3.Transition<Element, unknown, any, unknown>) => void;\n}\n\n/**\n * Represents a Bar Plot\n * @param  props       The set of React properties\n * @return             The Bar plot component\n */\nexport function BarBase({\n    x,\n    y,\n    canvas,\n    renderVirtualCanvas,\n    color,\n    scaleMode = \"plot\",\n    showInLegend = true,\n    interactive = true,\n    onMouseOver,\n    onMouseOut,\n    onClick,\n    layer,\n}: IBarBaseProps) {\n    const data = useSelector((s: IState) => chartSelectors.data(s));\n    const width = useSelector((s: IState) => chartSelectors.dimensions.width(s));\n    const height = useSelector((s: IState) => chartSelectors.dimensions.height(s));\n    const xScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, x, scaleMode));\n    const yScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, y, scaleMode));\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const animationDuration = useSelector((s: IState) => chartSelectors.animationDuration(s));\n\n    const fillColor = d3.color(`${color ?? theme.series.colors[0]}`);\n    fillColor.opacity = theme.series.opacity;\n\n    useLegendItem(x, \"square\", showInLegend, fillColor);\n    const onTooltip = useTooltip({ y });\n    const onFocus = useFocused({ yScale, theme, grouped: false });\n\n    useRender(() => {\n        const { update } = bar.render({\n            animationDuration,\n            interactive,\n            layer: layer.current,\n            data,\n            fillColor,\n            onMouseOver,\n            onMouseOut,\n            onClick,\n            onFocus,\n            onTooltip,\n            theme,\n            x,\n            y,\n            xScale,\n            yScale,\n        });\n\n        renderCanvas(canvas, renderVirtualCanvas, width, height, update);\n    }, [\n        x,\n        y,\n        data,\n        canvas,\n        renderVirtualCanvas,\n        xScale,\n        yScale,\n        layer,\n        animationDuration,\n        onMouseOver,\n        onMouseOut,\n        onClick,\n    ]);\n\n    return null;\n}\n","import React from \"react\";\n\nimport { withCanvas, withSVG, withXYPlot } from \"../../../../hoc\";\n\nimport { BarBase, IBarBaseProps } from \"./BarBase\";\n\nexport interface IBarProps extends Omit<IBarBaseProps, \"layer\" | \"canvas\"> {\n    /**\n     * Should Canvas be used instead of SVG?\n     */\n    useCanvas?: boolean;\n}\n\nconst CanvasBar = withCanvas(withXYPlot<IBarProps>(BarBase), \"plot bar\");\nconst SVGBar = withSVG(withXYPlot<IBarProps>(BarBase), \"plot bar\");\n\n/**\n * Represents a Bar plot\n * @param  useCanvas   Should Canvas be used instead of SVG?\n * @param  props       The set of React properties\n * @return             The Bar plot component\n */\nexport function Bar({ useCanvas = false, ...props }: IBarProps) {\n    if (useCanvas) {\n        return <CanvasBar {...props} />;\n    }\n\n    return <SVGBar {...props} />;\n}\n\nBar.requiresVirtualCanvas = true;\nBar.isPlot = true;\nBar.brush = {\n    horizontal: false,\n    vertical: true,\n};\nBar.zoom = {\n    horizontal: false,\n    vertical: true,\n};\n","export * from \"./Bar\";\nexport * from \"./BarBase\";\n","import { bar, chartSelectors, d3, IState } from \"@chart-io/core\";\nimport type { IColor, IEventPlotProps } from \"@chart-io/core\";\n\nimport { useSelector } from \"react-redux\";\n\nimport { useLegendItems, useRender } from \"../../../../hooks\";\n\nimport { renderCanvas } from \"../../renderCanvas\";\nimport { useFocused } from \"../useFocused\";\nimport { useTooltip } from \"../useTooltip\";\n\nexport interface IStackedBarBaseProps extends Omit<IEventPlotProps, \"ys\" | \"x\"> {\n    /**\n     * This is an internally used function to allow the scatter plot to render to a virtual canvas\n     */\n    renderVirtualCanvas?: (update: d3.Transition<Element, unknown, any, unknown>) => void;\n    /**\n     * The set of x fields to use to access the data for each plot\n     */\n    xs: Array<string>;\n    /**\n     * The y field to use to access the data for each plot\n     */\n    y: string;\n    /**\n     * The set of colors to use for the different plot\n     */\n    colors?: Array<IColor>;\n}\n\n/**\n * Represents a Column Plot\n * @param  props       The set of React properties\n * @return             The Column plot component\n */\nexport function StackedBarBase({\n    xs,\n    y,\n    colors,\n    scaleMode = \"plot\",\n    showInLegend = true,\n    interactive = true,\n    onMouseOver,\n    onMouseOut,\n    onClick,\n    layer,\n    canvas,\n    renderVirtualCanvas,\n}: IStackedBarBaseProps) {\n    const data = useSelector((s: IState) => chartSelectors.data(s));\n    const height = useSelector((s: IState) => chartSelectors.dimensions.height(s));\n    const width = useSelector((s: IState) => chartSelectors.dimensions.width(s));\n    const xScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, xs[0], scaleMode));\n    const yScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, y, scaleMode));\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const animationDuration = useSelector((s: IState) => chartSelectors.animationDuration(s));\n\n    const onTooltip = useTooltip({ y });\n    const onFocus = useFocused({ yScale, theme, grouped: false });\n\n    useLegendItems(xs, \"square\", showInLegend, colors);\n\n    // prettier-ignore\n    useRender(() => {\n        const { update } = bar.stacked.render({\n            animationDuration,\n            interactive,\n            layer: layer.current,\n            data,\n            colors,\n            onMouseOver,\n            onMouseOut,\n            onClick,\n            onFocus,\n            onTooltip,\n            theme,\n            xs,\n            y,\n            xScale,\n            yScale,\n        });\n\n        // @ts-ignore: TODO: Fix this TS\n        renderCanvas(canvas, renderVirtualCanvas, width, height, update);\n    }, [y, xs, data, xScale, yScale, layer, animationDuration, onMouseOver, onMouseOut, onClick]);\n\n    return null;\n}\n","import { chartSelectors, IState } from \"@chart-io/core\";\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { withCanvas, withSVG, withXYPlot } from \"../../../../hoc\";\n\nimport { IStackedBarBaseProps, StackedBarBase } from \"./StackedBarBase\";\n\nexport interface IStackedBarProps extends Omit<IStackedBarBaseProps, \"interactive\" | \"layer\"> {\n    /**\n     * Should Canvas be used instead of SVG?\n     */\n    useCanvas?: boolean;\n}\n\nconst StackedCanvasBar = withCanvas(withXYPlot<IStackedBarProps>(StackedBarBase), \"plot stacked-bar\");\nconst StackedSVGBar = withSVG(withXYPlot<IStackedBarProps>(StackedBarBase), \"plot stacked-bar\");\n\n/**\n * Represents a Bar plot\n * @param  useCanvas   Should Canvas be used instead of SVG?\n * @param  props       The set of React properties\n * @return             The Bar plot component\n */\nexport function StackedBar({ useCanvas = false, colors, ...props }: IStackedBarProps) {\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const palette = colors || theme.series.colors;\n\n    if (useCanvas) {\n        return <StackedCanvasBar {...props} colors={palette} />;\n    }\n\n    return <StackedSVGBar {...props} colors={palette} />;\n}\n\nStackedBar.requiresVirtualCanvas = true;\nStackedBar.isPlot = true;\nStackedBar.brush = {\n    horizontal: false,\n    vertical: true,\n};\nStackedBar.zoom = {\n    horizontal: false,\n    vertical: true,\n};\n","export * from \"./StackedBar\";\nexport * from \"./StackedBarBase\";\n","import { bar, chartSelectors, d3, IState } from \"@chart-io/core\";\nimport type { IColor, IEventPlotProps } from \"@chart-io/core\";\n\nimport { useSelector } from \"react-redux\";\n\nimport { useLegendItems, useRender } from \"../../../../hooks\";\n\nimport { renderCanvas } from \"../../renderCanvas\";\nimport { useFocused } from \"../useFocused\";\nimport { useTooltip } from \"../useTooltip\";\n\nexport interface IGroupedBarBaseProps extends Omit<IEventPlotProps, \"ys\" | \"x\"> {\n    /**\n     * This is an internally used function to allow the scatter plot to render to a virtual canvas\n     */\n    renderVirtualCanvas?: (update: d3.Transition<Element, unknown, any, unknown>) => void;\n    /**\n     * The set of x fields to use to access the data for each plot\n     */\n    xs: Array<string>;\n    /**\n     * The y field to use to access the data for each plot\n     */\n    y: string;\n    /**\n     * The set of colors to use for the different plot\n     */\n    colors?: Array<IColor>;\n}\n\n/**\n * Represents a Column Plot\n * @param  props       The set of React properties\n * @return             The Column plot component\n */\nexport function GroupedBarBase({\n    xs,\n    y,\n    colors,\n    scaleMode = \"plot\",\n    showInLegend = true,\n    interactive = true,\n    onMouseOver,\n    onMouseOut,\n    onClick,\n    layer,\n    canvas,\n    renderVirtualCanvas,\n}: IGroupedBarBaseProps) {\n    const data = useSelector((s: IState) => chartSelectors.data(s));\n    const height = useSelector((s: IState) => chartSelectors.dimensions.height(s));\n    const width = useSelector((s: IState) => chartSelectors.dimensions.width(s));\n    const xScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, xs[0], scaleMode));\n    const yScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, y, scaleMode));\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const animationDuration = useSelector((s: IState) => chartSelectors.animationDuration(s));\n\n    const onTooltip = useTooltip({ y });\n    const onFocus = useFocused({ yScale, theme, grouped: true });\n\n    useLegendItems(xs, \"square\", showInLegend, colors);\n\n    // prettier-ignore\n    useRender(() => {\n        const { update } = bar.grouped.render({\n            animationDuration,\n            interactive,\n            layer: layer.current,\n            data,\n            colors,\n            onMouseOver,\n            onMouseOut,\n            onClick,\n            onFocus,\n            onTooltip,\n            theme,\n            xs,\n            y,\n            xScale,\n            yScale,\n        });\n\n        renderCanvas(canvas, renderVirtualCanvas, width, height, update);\n    }, [y, xs, data, xScale, yScale, layer, animationDuration, onMouseOver, onMouseOut, onClick]);\n\n    return null;\n}\n","import { chartSelectors, IState } from \"@chart-io/core\";\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { withCanvas, withSVG, withXYPlot } from \"../../../../hoc\";\n\nimport { GroupedBarBase, IGroupedBarBaseProps } from \"./GroupedBarBase\";\n\nexport interface IGroupedBarProps extends Omit<IGroupedBarBaseProps, \"interactive\" | \"layer\"> {\n    /**\n     * Should Canvas be used instead of SVG?\n     */\n    useCanvas?: boolean;\n}\n\nconst GroupedCanvasBar = withCanvas(withXYPlot<IGroupedBarProps>(GroupedBarBase), \"plot grouped-bar\");\nconst GroupedSVGBar = withSVG(withXYPlot<IGroupedBarProps>(GroupedBarBase), \"plot grouped-bar\");\n\n/**\n * Represents a Bar plot\n * @param  useCanvas   Should Canvas be used instead of SVG?\n * @param  props       The set of React properties\n * @return             The Bar plot component\n */\nexport function GroupedBar({ useCanvas = false, colors, ...props }: IGroupedBarProps) {\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const palette = colors || theme.series.colors;\n\n    if (useCanvas) {\n        return <GroupedCanvasBar {...props} colors={palette} />;\n    }\n\n    return <GroupedSVGBar {...props} colors={palette} />;\n}\n\nGroupedBar.requiresVirtualCanvas = true;\nGroupedBar.isPlot = true;\nGroupedBar.brush = {\n    horizontal: false,\n    vertical: true,\n};\nGroupedBar.zoom = {\n    horizontal: false,\n    vertical: true,\n};\n","export * from \"./GroupedBar\";\nexport * from \"./GroupedBarBase\";\n","import { chartSelectors, IState, logAndThrowError } from \"@chart-io/core\";\nimport type { IPlotsProps } from \"@chart-io/core\";\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { Bar } from \"./Bar\";\nimport { GroupedBar } from \"./GroupedBar\";\nimport { StackedBar } from \"./StackedBar\";\n\nexport interface IBarsProps extends Omit<IPlotsProps, \"ys\" | \"x\"> {\n    /**\n     * The set of x fields to use to access the data for each plot\n     */\n    xs: Array<string>;\n    /**\n     * The y field to use to access the data for each plot\n     */\n    y: string;\n    /**\n     * Should the column plots be stacked based on the x-value?\n     */\n    stacked?: boolean;\n    /**\n     * Should the column plots be grouped based on the x-value?\n     */\n    grouped?: boolean;\n}\n\n/**\n * Represents a set of Bar Plots\n * @param  props       The set of React properties\n * @return             The Bar plot component\n */\nexport function Bars({ y, xs, colors, stacked = false, grouped = false, ...props }: IBarsProps) {\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const palette = colors || theme.series.colors;\n\n    if (stacked && grouped) {\n        logAndThrowError(\"E003\", \"Bar plots do not support both being stacked and grouped\");\n    }\n\n    if (!stacked && !grouped) {\n        logAndThrowError(\"E004\", \"Multiple Bar plots must be either stacked or grouped\");\n    }\n\n    if (stacked) {\n        return <StackedBar y={y} xs={xs} colors={palette} {...props} />;\n    }\n\n    if (grouped) {\n        return <GroupedBar y={y} xs={xs} colors={palette} {...props} />;\n    }\n\n    return (\n        <React.Fragment>\n            {xs.map((x, i) => (\n                <Bar {...props} key={x} x={x} y={y} color={palette[i]} />\n            ))}\n        </React.Fragment>\n    );\n}\n\nBars.requiresVirtualCanvas = true;\nBars.isPlot = true;\nBars.brush = {\n    horizontal: false,\n    vertical: true,\n};\nBars.zoom = {\n    horizontal: false,\n    vertical: true,\n};\n"],"names":["cov_ycv6n3bd8","s","useTooltip","y","f","dispatch","datum","setDatum","useState","colors","setColors","xs","setXs","positionEvent","setPositionEvent","useEffect","bar","tooltip","event","cov_1a2xlr3n4p","path","hash","global","gcv","coverageData","coverage","actualCoverage","BarBase","x","canvas","renderVirtualCanvas","color","scaleMode","b","showInLegend","interactive","onMouseOver","onMouseOut","onClick","layer","data","useSelector","chartSelectors","width","dimensions","height","xScale","scales","getScale","yScale","theme","animationDuration","fillColor","d3","series","opacity","useLegendItem","onTooltip","onFocus","useFocused","grouped","useRender","update","render","current","CanvasBar","cov_jnkh0gn9t","withCanvas","withXYPlot","SVGBar","withSVG","cov_1o947yz1m6","cov_174qcmu2fo","StackedBarBase","StackedCanvasBar","cov_1z4vhdsanz","StackedSVGBar","cov_2kkv7g38rp","cov_r3ncgq83c","GroupedBarBase","GroupedCanvasBar","cov_2htrgxkm3o","GroupedSVGBar","cov_2rdxl4v8n6","Bars","stacked","cov_h9qupuqur","props"],"mappings":"63KAGA,EAiBkCA,EAAA,EAAAC,EAoBtB,CAAA,IAAA,MACJC,EAAAA,CAAA,CAAAC,EAAAA,CAAA,IAAA,CAAAH,EAAA,EAAAI,OAEA,KAAM,CAAEC,SAAAA,CAAAC,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,KAER,CAAAA,EAAoBC,CAAA,GAAAP,EAAA,EAAAC,EAAAO,CAAAA,IAAAA,EAAA,SAAA,IAAA,GACpB,CAAAC,EAAAC,CAAsB,GAAAV,EAAA,EAAAC,EAAA,CAAA,IAAAO,EAAAA,SAAA,IAAA,GAChBG,CAAEA,EAAAC,CAAA,GAAAZ,IAAAC,EAAAO,CAAAA,IAAAA,EAAA,SAAA,IAAA,GACR,CAAAK,EAAcC,CAAA,GAAAd,EAAA,EAAAC,EAAAO,CAAAA,IAAAA,EAAA,SAAA,IAAA,GAAAR,OAAAA,EAAAC,EAAAA,OAEtBc,EAAAA,UAAA,KAAAf,EAAA,EAAAI,EAAA,CAAA,IAAAJ,EAAAC,EAAAA,EAES,CAAA,IAAAe,EAAAC,QAAA,CAAAZ,SAAAA,EAAAC,MAAAA,EAAAG,OAAAA,EAAAS,MAAAL,EAAAF,GAAAA,EAAAR,EAAAA,CAAA,CAAA,qUCFL,SAAAgB,GAAA,CAAA,IAAAC,EAAA,kGAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,kGAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,UAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,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A,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAA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AAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EA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"}