import{j as e}from"./jsx-runtime-BjG_zV1W.js";import{useMDXComponents as r}from"./index-D-2zTmTn.js";import{M as o,C as t}from"./index-Dw1MpZ3G.js";import{Basic as l,Color as d,LineWithBrush as h}from"./Line.stories-ls6FUCzX.js";import"./index-DpTt3J-R.js";import"./iframe-Bho3GZXG.js";import"./index-D5nvoAmD.js";import"./index-B77L4dcM.js";import"./index-DrFu-skq.js";import"./index-Dcm7olAB.js";import"./waves-BDt9gctZ.js";import"./argTypes-DuN6ki1s.js";import"./react-redux-QXbQKOoW.js";import"./renderChart-BLsEhK0I.js";import"./test-utils-C-DEfvFY.js";import"./client-CbGTh6y2.js";import"./storybook-CmUtk8-_.js";import"./index-Bg6IsbDW.js";import"./index-D50cK_1g.js";import"./index-CRk78wGA.js";import"./index-_rl-6daV.js";import"./lodash-DOJiQ2Wu.js";import"./index-D53rF_3R.js";import"./index-Du5VnEcz.js";import"./index-CJyk9Ty5.js";import"./index-gt7zBpiH.js";import"./Legend-pimTzOFw.js";import"./index-D4-eAyeX.js";import"./index-BmYvQTbQ.js";import"./Circle-Qf3Tu8hN.js";import"./Line-BjKan0E4.js";import"./Square-CZVurtTs.js";import"./index-B2ADnR9i.js";import"./index-mxfEYTca.js";import"./index-BEVv-T-d.js";import"./Tooltip-DL_pUHjQ.js";import"./index-BH_8yRl6.js";import"./TooltipItem-CWwi-etI.js";import"./index-BXRhMbPE.js";import"./index-C_QuCFx-.js";import"./XAxis-ChDwRgF9.js";import"./index-DIhe8qvN.js";import"./YAxis-DSGnzgTy.js";import"./Lines-BtR_OUgn.js";import"./Scatters-t7a3qHKk.js";import"./renderCanvas-Cl5RbTFF.js";function s(i){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...r(),...i.components};return e.jsxs(e.Fragment,{children:[e.jsx(o,{title:"XYCharts/Line"}),`
`,e.jsx(n.h1,{id:"line-plots",children:"Line Plots"}),`
`,e.jsx(n.p,{children:"There are two different Line based components, these include:"}),`
`,e.jsxs(n.ul,{children:[`
`,e.jsxs(n.li,{children:[e.jsx(n.code,{children:"<Line>"})," - allows us to define a line plot on our chart"]}),`
`,e.jsxs(n.li,{children:[e.jsx(n.code,{children:"<Lines>"})," - allows us to define multiple line series"]}),`
`]}),`
`,e.jsxs(n.blockquote,{children:[`
`,e.jsxs(n.p,{children:[e.jsx(n.strong,{children:"Note"}),": To ensure interactivity this component should be used with the ",e.jsx(n.code,{children:"<EventRecorder>"})," component which picks up events on the background and pipes them to the plot."]}),`
`]}),`
`,e.jsxs(n.h2,{id:"line-component",children:[e.jsx(n.code,{children:"<Line>"})," Component"]}),`
`,e.jsxs(n.p,{children:["The ",e.jsx(n.code,{children:"<Line>"})," component should be used when you want to plot a single line plot on a chart."]}),`
`,e.jsx(t,{of:l}),`
`,e.jsx(n.h3,{id:"props",children:"Props"}),`
`,e.jsxs(n.table,{children:[e.jsx(n.thead,{children:e.jsxs(n.tr,{children:[e.jsx(n.th,{children:"Prop"}),e.jsx(n.th,{children:"Type"}),e.jsx(n.th,{children:"Default"}),e.jsx(n.th,{children:"Note"})]})}),e.jsxs(n.tbody,{children:[e.jsxs(n.tr,{children:[e.jsx(n.td,{children:e.jsxs(n.strong,{children:[e.jsx(n.code,{children:"x"}),"*"]})}),e.jsx(n.td,{children:e.jsx(n.code,{children:"string"})}),e.jsx(n.td,{children:e.jsx(n.code,{children:"null"})}),e.jsx(n.td,{children:"The key of the field that contains the value along the x-axis."})]}),e.jsxs(n.tr,{children:[e.jsx(n.td,{children:e.jsxs(n.strong,{children:[e.jsx(n.code,{children:"y"}),"*"]})}),e.jsx(n.td,{children:e.jsx(n.code,{children:"string"})}),e.jsx(n.td,{children:e.jsx(n.code,{children:"null"})}),e.jsx(n.td,{children:"The key of the field that contains the value along the y-axis."})]}),e.jsxs(n.tr,{children:[e.jsx(n.td,{children:e.jsx(n.code,{children:"color"})}),e.jsx(n.td,{children:e.jsx(n.code,{children:"string"})}),e.jsx(n.td,{children:"Derived from Theme"}),e.jsx(n.td,{children:"Override the colour of the series"})]}),e.jsxs(n.tr,{children:[e.jsx(n.td,{children:e.jsx(n.code,{children:"interactive"})}),e.jsx(n.td,{children:e.jsx(n.code,{children:"boolean"})}),e.jsx(n.td,{children:e.jsx(n.code,{children:"true"})}),e.jsx(n.td,{children:"Whether the plot should be interactive. Setting this to false will disable tooltips & markers from this plot"})]}),e.jsxs(n.tr,{children:[e.jsx(n.td,{children:e.jsx(n.code,{children:"showInLegend"})}),e.jsx(n.td,{children:e.jsx(n.code,{children:"boolean"})}),e.jsx(n.td,{children:e.jsx(n.code,{children:"true"})}),e.jsx(n.td,{children:"Whether the plot should feature in the legend or not."})]}),e.jsxs(n.tr,{children:[e.jsx(n.td,{children:e.jsx(n.code,{children:"noClip"})}),e.jsx(n.td,{children:e.jsx(n.code,{children:"boolean"})}),e.jsx(n.td,{children:e.jsx(n.code,{children:"false"})}),e.jsx(n.td,{children:"Supress clipping of the plot."})]})]})]}),`
`,e.jsx(n.h3,{id:"visual-styling",children:"Visual Styling"}),`
`,e.jsxs(n.p,{children:["Most of the configuration for a ",e.jsx(n.code,{children:"<Line>"})," is similar to other plots. Currently the only styling property avaliable is the colour option."]}),`
`,e.jsx(t,{of:d}),`
`,e.jsx(n.h2,{id:"lines-component",children:e.jsx(n.code,{children:"<Lines> Component"})}),`
`,e.jsxs(n.p,{children:["The ",e.jsx(n.code,{children:"<Lines>"})," component allows us to define multiple line series. When plotting multiple line series they do not stack, but always behave by overlaying on top of one another."]}),`
`,e.jsxs(n.p,{children:["The simplest way is to use the ",e.jsx(n.code,{children:"<Lines>"})," (plural) component. The ",e.jsx(n.code,{children:"<Lines>"})," component allows us to define multiple series at once and takes care of automaticallying layering and assigning colors. It is however possible to do this manually if required by defining multiple ",e.jsx(n.code,{children:"<Line>"})," components, configuring with a colour manually."]}),`
`,e.jsx(n.h3,{id:"props-1",children:"Props"}),`
`,e.jsxs(n.table,{children:[e.jsx(n.thead,{children:e.jsxs(n.tr,{children:[e.jsx(n.th,{children:"Prop"}),e.jsx(n.th,{children:"Type"}),e.jsx(n.th,{children:"Default"}),e.jsx(n.th,{children:"Note"})]})}),e.jsxs(n.tbody,{children:[e.jsxs(n.tr,{children:[e.jsx(n.td,{children:e.jsxs(n.strong,{children:[e.jsx(n.code,{children:"x"}),"*"]})}),e.jsx(n.td,{children:e.jsx(n.code,{children:"string"})}),e.jsx(n.td,{children:e.jsx(n.code,{children:"null"})}),e.jsx(n.td,{children:"The key of the field that contains the value along the x-axis."})]}),e.jsxs(n.tr,{children:[e.jsx(n.td,{children:e.jsxs(n.strong,{children:[e.jsx(n.code,{children:"ys"}),"*"]})}),e.jsx(n.td,{children:e.jsx(n.code,{children:"string[]"})}),e.jsx(n.td,{children:e.jsx(n.code,{children:"null"})}),e.jsx(n.td,{children:"The keys of the fields that contains values along the y-axis."})]}),e.jsxs(n.tr,{children:[e.jsx(n.td,{children:e.jsx(n.code,{children:"colors"})}),e.jsx(n.td,{children:e.jsx(n.code,{children:"string[]"})}),e.jsx(n.td,{children:"Derived from Theme"}),e.jsx(n.td,{children:"Override the colours for the series"})]})]})]}),`
`,e.jsx(n.h3,{id:"zooming",children:"Zooming"}),`
`,e.jsxs(n.p,{children:['It is also possible to enable "brush" zooming on a line chart. To do this simply provide a the following prop to the ',e.jsx(n.code,{children:"<XYChart>"})," component:"]}),`
`,e.jsx(n.pre,{children:e.jsx(n.code,{className:"language-javascript",children:`<XYChart zoomBrush="inline" />
`})}),`
`,e.jsx(t,{of:h})]})}function ie(i={}){const{wrapper:n}={...r(),...i.components};return n?e.jsx(n,{...i,children:e.jsx(s,{...i})}):s(i)}export{ie as default};
//# sourceMappingURL=Line-BLgYV9St.js.map
