{"version":3,"file":"Areas-DNR506EA.js","sources":["../../src/lib/components/Plots/Area/Area/useDatumFocus.ts","../../src/lib/components/Plots/Area/Area/usePathCreator.ts","../../src/lib/components/Plots/Area/Area/AreaBase.tsx","../../src/lib/components/Plots/Area/Area/Area.tsx","../../src/lib/components/Plots/Area/Area/index.ts","../../src/lib/components/Plots/Area/StackedArea/useDatumFocus.ts","../../src/lib/components/Plots/Area/StackedArea/useMultiPathCreator.ts","../../src/lib/components/Plots/Area/StackedArea/StackedAreaBase.tsx","../../src/lib/components/Plots/Area/StackedArea/StackedArea.tsx","../../src/lib/components/Plots/Area/Areas.tsx"],"sourcesContent":["import { area, eventSelectors, IState } from \"@chart-io/core\";\n\nimport { useSelector, useStore } from \"react-redux\";\nimport { useEffect } from \"react\";\n\ninterface IDatumFocusProps extends Omit<area.IAreaFocusProps, \"dispatch\" | \"eventMode\" | \"position\"> {\n    /**\n     * Whether the plot is interactive\n     */\n    interactive: boolean;\n}\n\n/**\n * Responds to events from an event layer to focus the nearest datum\n */\nexport function useDatumFocus({ interactive, x, y, xScale, yScale, data, color }: IDatumFocusProps) {\n    const { dispatch } = useStore();\n    const eventMode = useSelector((s: IState) => eventSelectors.mode(s));\n    const position = useSelector((s: IState) => eventSelectors.position(s));\n\n    /* If possible respond to global mouse events for tooltips etc */\n    useEffect(() => {\n        /* If possible respond to global mouse events for tooltips etc */\n        if (interactive) {\n            return area.focus({\n                dispatch,\n                x,\n                y,\n                color,\n                xScale,\n                yScale,\n                position,\n                data,\n                eventMode,\n            });\n        }\n    }, [eventMode, position.x, position.y, xScale, yScale, x, y, data, color]);\n}\n","import { d3 } from \"@chart-io/core\";\nimport type { IScale } from \"@chart-io/core\";\nimport { useEffect } from \"react\";\n\n/**\n * Creates an SVG path in the DOM positioned at the bottom of the Axis\n * so we can animate smoothly from 0\n * @param  layer      The layer we're updating to from a React useRef\n * @param  x          The key of the field used for the x position\n * @param  y          The key of the field used for the y position\n * @param  xScale     The d3 scale for the x axis\n * @param  yScale     The d3 scale for the y axis\n * @param  canvas     If a canvas is provided this will supress the path creator in a React hook safe way\n */\nexport function usePathCreator(\n    layer: React.MutableRefObject<Element>,\n    x: string,\n    y: string,\n    xScale: IScale,\n    yScale: IScale,\n    canvas: HTMLCanvasElement\n) {\n    useEffect(() => {\n        // Ensure that we've got the SVG group to render to\n        // If a canvas is provided this will supress the path creator in a React hook safe way\n        if (!layer.current || canvas) {\n            return;\n        }\n\n        const current = layer.current;\n\n        // Cleanup the DOM if the scales have been removed as we\n        // have no idea where to draw a line\n        if (!xScale || !yScale) {\n            d3.select(current).selectAll(\"*\").remove();\n            return;\n        }\n\n        // @ts-expect-error: This is a runtime check\n        const bandwidth = xScale.bandwidth ? xScale.bandwidth() / 2 : 0;\n\n        const area = d3\n            .area()\n            .curve(d3.curveLinear)\n            .x((d) => xScale(d[x]) + bandwidth)\n            .y0(() => yScale.range()[0] as number)\n            .y1((d) => yScale(d[y]));\n\n        // Only ever add the path once on first render when\n        // we've got the minimum bits required\n        d3.select(current)\n            .append(\"path\")\n            .datum([\n                { [x]: xScale.domain()[0], [y]: yScale.domain()[0] },\n                { [x]: xScale.domain()[xScale.domain().length - 1], [y]: yScale.domain()[0] },\n            ])\n            .attr(\"class\", \"area\")\n            // @ts-ignore: TODO: Not sure how to fix this\n            .attr(\"d\", area);\n\n        // Do not include the scales in here. While they need\n        // to be used for the first render, we never want to\n        // update this line even if the scales change.\n        //\n        // The fact that the plot is called via an withXYPlot provides\n        // enough safety around the scales being null on first render\n    }, [layer, x, y, xScale, yScale]);\n}\n","import { area, chartSelectors, IState } from \"@chart-io/core\";\nimport { d3 } from \"@chart-io/core\";\nimport type { IPlotProps } from \"@chart-io/core\";\n\nimport { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { useLegendItem, useRender } from \"../../../../hooks\";\n\nimport { useDatumFocus } from \"./useDatumFocus\";\nimport { usePathCreator } from \"./usePathCreator\";\nimport { useTooltip } from \"./useTooltip\";\n\nexport interface IAreaBaseProps extends IPlotProps {\n    /**\n     * The key of the field used for the y2 position for a stream graph\n     */\n    y2?: string;\n}\n\n/**\n * Represents an Area Plot on an SVG Element\n * @param  props       The set of React properties\n * @return             The Line plot component\n */\nexport function AreaBase({\n    x,\n    y,\n    y2,\n    color,\n    scaleMode = \"plot\",\n    showInLegend = true,\n    interactive = true,\n    layer,\n    canvas,\n}: IAreaBaseProps) {\n    const data = useSelector((s: IState) => chartSelectors.data(s));\n    const xScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, x, scaleMode));\n    const yScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, y, scaleMode));\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const width = useSelector((s: IState) => chartSelectors.dimensions.width(s));\n    const height = useSelector((s: IState) => chartSelectors.dimensions.height(s));\n    const animationDuration = useSelector((s: IState) => chartSelectors.animationDuration(s));\n\n    const sortedData = useMemo(() => data.toSorted((a, b) => d3.ascending(a[x], b[x])), [data, x]);\n\n    const fillColor = d3.color(`${color ?? theme.series.colors[0]}`);\n    fillColor.opacity = theme.series.opacity;\n    const strokeColor = fillColor.darker();\n\n    useLegendItem(y, \"line\", showInLegend, fillColor);\n\n    // Used to create our initial path\n    usePathCreator(layer, x, y, xScale, yScale, canvas);\n\n    /* On future renders we want to update the path */\n    useRender(() => {\n        const props = { x, y, y2, xScale, yScale, data: sortedData, fillColor, strokeColor, theme };\n\n        // Handle Canvas rendering\n        if (canvas) {\n            return area.canvas.render({ ...props, height, width, canvas });\n        }\n\n        area.render({ ...props, layer: layer.current, animationDuration });\n    }, [x, y, sortedData, xScale, yScale, layer, canvas, width, height, theme.series.colors, animationDuration]);\n\n    // If possible respond to global mouse events for tooltips etc\n    useDatumFocus({ x, y, xScale, yScale, data: sortedData, color: strokeColor, interactive });\n    useTooltip({ x, y, xScale, yScale, data: sortedData, color: strokeColor, interactive });\n\n    return null;\n}\n","import React from \"react\";\n\nimport { AreaBase, IAreaBaseProps } from \"./AreaBase\";\nimport { withCanvas, withSVG, withXYPlot } from \"../../../../hoc\";\n\nexport interface IAreaProps extends Omit<IAreaBaseProps, \"layer\" | \"canvas\"> {\n    /**\n     * Should this plot use an HTML Canvas instead of SVG?\n     */\n    useCanvas?: boolean;\n}\n\nconst WrappedCanvasArea = withCanvas<IAreaProps>(withXYPlot(AreaBase), \"plot area\");\nconst WrappedSVGArea = withSVG<IAreaProps>(withXYPlot(AreaBase), \"plot area\");\n\n/**\n * Represents a Area plot\n * @param  useCanvas   Should Canvas be used instead of SVG?\n * @param  props       The set of React properties\n * @return             The Area plot component\n */\nexport function Area({ useCanvas = false, ...props }: IAreaProps) {\n    if (useCanvas) {\n        return <WrappedCanvasArea {...props} />;\n    }\n\n    return <WrappedSVGArea {...props} />;\n}\n\nArea.requiresVirtualCanvas = false;\nArea.isPlot = true;\nArea.brush = {\n    horizontal: true,\n    vertical: false,\n};\nArea.zoom = {\n    horizontal: true,\n    vertical: false,\n};\n","export * from \"./Area\";\nexport * from \"./AreaBase\";\n","import { area, eventSelectors, IState } from \"@chart-io/core\";\n\nimport { useSelector, useStore } from \"react-redux\";\nimport { useEffect } from \"react\";\n\ninterface IDatumsFocusProps extends Omit<area.IStackedAreaFocusProps, \"dispatch\" | \"eventMode\" | \"position\"> {\n    /**\n     * Whether the plot is interactive\n     */\n    interactive: boolean;\n}\n\n/**\n * Responds to events from an event layer to focus the nearest datum\n */\nexport function useDatumFocus({ interactive, x, ys, xScale, yScale, data, colors }: IDatumsFocusProps) {\n    const { dispatch } = useStore();\n    const eventMode = useSelector((s: IState) => eventSelectors.mode(s));\n    const position = useSelector((s: IState) => eventSelectors.position(s));\n\n    /* If possible respond to global mouse events for tooltips etc */\n    useEffect(() => {\n        /* If possible respond to global mouse events for tooltips etc */\n        if (interactive) {\n            return area.stacked.focus({\n                dispatch,\n                x,\n                ys,\n                colors,\n                xScale,\n                yScale,\n                position,\n                data,\n                eventMode,\n            });\n        }\n    }, [dispatch, eventMode, position.x, position.y, xScale, yScale, x, ys, data, colors]);\n}\n","import { d3 } from \"@chart-io/core\";\nimport type { IScale } from \"@chart-io/core\";\nimport { useEffect } from \"react\";\n\n/**\n * Creates an SVG path in the DOM positioned at the bottom of the Axis\n * so we can animate smoothly from 0\n * @param  layer      The layer we're updating to from a React useRef\n * @param  x          The key of the field used for the x position\n * @param  ys         The keys of the fields used for y position\n * @param  xScale     The d3 scale for the x axis\n * @param  yScale     The d3 scale for the y axis\n * @param  canvas     If a canvas is provided this will supress the path creator in a React hook safe way\n */\nexport function useMultiPathCreator(\n    layer: React.MutableRefObject<Element>,\n    x: string,\n    ys: string[],\n    xScale: IScale,\n    yScale: IScale,\n    canvas: HTMLCanvasElement\n) {\n    useEffect(() => {\n        // Ensure that we've got the SVG group to render to\n        // If a canvas is provided this will supress the path creator in a React hook safe way\n        if (!layer.current || canvas) {\n            return;\n        }\n\n        const current = layer.current;\n\n        // Cleanup the DOM if the scales have been removed as we\n        // have no idea where to draw a line\n        if (!xScale || !yScale) {\n            d3.select(current).selectAll(\"*\").remove();\n            return;\n        }\n\n        const area = d3\n            .area()\n            .curve(d3.curveLinear)\n            // @ts-ignore: TODO: Not sure how to fix this\n            .x((d) => xScale(d.data[x]))\n            .y0((d) => yScale(d[0]))\n            .y1((d) => yScale(d[1]));\n\n        const ZeroedData = ys.reduce(\n            (data, y) => {\n                return [\n                    { ...data[0], [y]: yScale.domain()[0] },\n                    { ...data[1], [y]: yScale.domain()[0] },\n                ];\n            },\n            [{ [x]: xScale.domain()[0] }, { [x]: xScale.domain()[1] }]\n        );\n\n        // @ts-ignore: TODO: Not sure how to fix this\n        const stackedData = d3.stack().keys(ys)(ZeroedData);\n\n        // Only ever add the path once on first render when\n        // we've got the minimum bits required\n        const join = d3.select(current).selectAll(\"path\").data(stackedData);\n\n        // Clean up old paths\n        join.exit().remove();\n\n        join.enter()\n            .append(\"path\")\n            .datum((d) => d)\n            .attr(\"class\", \"area\")\n            // @ts-ignore: TODO: Not sure how to fix this\n            .attr(\"d\", area);\n    }, [layer, x, ys, xScale, yScale]);\n}\n","import { area, chartSelectors, IState } from \"@chart-io/core\";\nimport { d3 } from \"@chart-io/core\";\nimport type { IColor, IEventPlotProps } from \"@chart-io/core\";\n\nimport { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { useLegendItems, useRender } from \"../../../../hooks\";\n\nimport { useDatumFocus } from \"./useDatumFocus\";\nimport { useMultiPathCreator } from \"./useMultiPathCreator\";\nimport { useTooltip } from \"./useTooltip\";\n\nexport interface IStackedAreaBaseProps extends Omit<IEventPlotProps, \"y\"> {\n    /**\n     * The set of y fields to use to access the data for each plot\n     */\n    ys: Array<string>;\n\n    /**\n     * The set of colors to use for the different plot\n     */\n    colors?: Array<IColor>;\n}\n\n/**\n * Represents a stacked Area Plot on an SVG Element\n * @param  {Object} props       The set of React properties\n * @return {ReactDOMComponent}  The Line plot component\n */\nexport function StackedAreaBase({\n    x,\n    ys,\n    colors,\n    scaleMode = \"plot\",\n    showInLegend = true,\n    interactive = true,\n    layer,\n    canvas,\n}: IStackedAreaBaseProps) {\n    const data = useSelector((s: IState) => chartSelectors.data(s));\n    const xScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, x, scaleMode));\n    const yScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, ys[0], scaleMode));\n    const width = useSelector((s: IState) => chartSelectors.dimensions.width(s));\n    const height = useSelector((s: IState) => chartSelectors.dimensions.height(s));\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const animationDuration = useSelector((s: IState) => chartSelectors.animationDuration(s));\n\n    const sortedData = useMemo(() => data.toSorted((a, b) => d3.ascending(a[x], b[x])), [data, x]);\n\n    // Used to create our initial path\n    useMultiPathCreator(layer, x, ys, xScale, yScale, canvas);\n    useLegendItems(ys, \"line\", showInLegend, colors);\n\n    /* On future renders we want to update the path */\n    useRender(async () => {\n        const props = { x, ys, xScale, yScale, data: sortedData, colors, theme };\n\n        // Handle Canvas rendering\n        if (canvas) {\n            return area.stacked.canvas.render({ ...props, width, height, canvas });\n        }\n\n        area.stacked.render({ ...props, layer: layer.current, animationDuration });\n    }, [x, ys, sortedData, xScale, yScale, layer, animationDuration, theme.series.opacity]);\n\n    // If possible respond to global mouse events for tooltips etc\n    useDatumFocus({ interactive, x, ys, xScale, yScale, data: sortedData, colors });\n    useTooltip({ x, ys, xScale, yScale, data: sortedData, colors, interactive });\n\n    return null;\n}\n","import { chartSelectors, IState } from \"@chart-io/core\";\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { IStackedAreaBaseProps, StackedAreaBase } from \"./StackedAreaBase\";\nimport { withCanvas, withSVG, withXYPlot } from \"../../../../hoc\";\n\nexport interface IStackedAreaProps extends Omit<IStackedAreaBaseProps, \"interactive\" | \"layer\"> {\n    /**\n     * Should Canvas be used instead of SVG?\n     */\n    useCanvas?: boolean;\n}\n\nconst StackedCanvasArea = withCanvas(withXYPlot<IStackedAreaProps>(StackedAreaBase), \"plot stacked-area\");\nconst StackedSVGArea = withSVG(withXYPlot<IStackedAreaProps>(StackedAreaBase), \"plot stacked-area\");\n\n/**\n * Represents a Column plot\n * @param  props       The set of React properties\n * @return             The Column plot component\n */\nexport function StackedArea({ useCanvas = false, colors, ...props }: IStackedAreaProps) {\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const palette = colors || theme.series.colors;\n\n    if (useCanvas) {\n        return <StackedCanvasArea {...props} colors={palette} />;\n    }\n\n    return <StackedSVGArea {...props} colors={palette} />;\n}\n\nStackedArea.requiresVirtualCanvas = false;\nStackedArea.isPlot = true;\nStackedArea.brush = {\n    horizontal: true,\n    vertical: false,\n};\nStackedArea.zoom = {\n    horizontal: true,\n    vertical: false,\n};\n","import { chartSelectors, IState } from \"@chart-io/core\";\nimport type { IPlotsProps } from \"@chart-io/core\";\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { Area } from \"./Area\";\nimport { StackedArea } from \"./StackedArea\";\n\nexport interface IAreasProps extends IPlotsProps {\n    /**\n     * Should the area plots be stacked based on the x-value?\n     */\n    stacked?: boolean;\n}\n\n/**\n * Represents a set of Area Plots\n * @param  props       The set of React properties\n * @return             The Area plot component\n */\nexport function Areas({ ys, colors, stacked = false, ...props }: IAreasProps) {\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const palette = colors || theme.series.colors;\n\n    if (stacked) {\n        return <StackedArea ys={ys} colors={palette} {...props} />;\n    }\n\n    return (\n        <React.Fragment>\n            {ys.map((y, i) => (\n                <Area {...props} key={y} y={y} color={palette[i]} />\n            ))}\n        </React.Fragment>\n    );\n}\n\nAreas.requiresVirtualCanvas = false;\nAreas.isPlot = true;\nAreas.brush = {\n    horizontal: true,\n    vertical: false,\n};\nAreas.zoom = {\n    horizontal: true,\n    vertical: false,\n};\n"],"names":["useDatumFocus","interactive","x","y","xScale","yScale","data","color","cov_k9ieyb6r3","f","dispatch","s","useStore","eventMode","useSelector","eventSelectors","mode","position","useEffect","usePathCreator","layer","cov_1bdj08mmse","path","hash","global","gcv","coverageData","coverage","actualCoverage","AreaBase","y2","scaleMode","b","showInLegend","canvas","chartSelectors","scales","getScale","theme","width","dimensions","height","animationDuration","WrappedCanvasArea","cov_2lbfv94dh2","withCanvas","withXYPlot","WrappedSVGArea","withSVG","cov_2ett1m3nhz","ys","colors","cov_avool7xrv","useMultiPathCreator","cov_2pr8hgzjx5","current","cov_3apsb3qm2","StackedAreaBase","StackedCanvasArea","cov_nfqdz15qb","StackedSVGArea","StackedArea","useCanvas","props","Areas","stacked","cov_2i4b9zqjx9","palette","series"],"mappings":"6sFA8BgB,SAAAA,GAAA,CAAAC,YAAAA,EAAAC,EAAAA,EAAAC,EAAAA,EAAAC,OAAAA,EAAAC,OAAAA,EAAAC,KAAAA,EAAAC,MAAAA,CAAA,EAAA,CAAAC,EAAAC,EAAAA,EACA,CAAA,IAAA,KAAA,CAAAC,SAAAA,CAAA,GAAAF,EAAAG,EAAAA,OAAAC,EACA,GAAAC,GAAAL,EAAA,EAAAG,EAAAG,CAAAA,IAAAA,EAAAH,IAAAH,EAAAC,EAAAA,OAAAD,EAAA,EAAAG,EAAAI,CAAAA,IAAAA,EAAAC,KAAAL,CAAA,EAAA,GACAM,GAAAT,EAAA,EAAAG,EAAA,CAAA,IAAAG,EAAAH,IAAAH,IAAAC,EAAAD,CAAAA,IAAAA,IAAAG,EAAA,CAAA,IAAAI,EAAAE,SAAAN,CAAA,EAAA,GAAAH,EAAA,EAAAG,EAGTO,CAAAA,IAAAA,EAAA,UAAY,IAAA,IAAAV,EAAA,EAAAC,EAAAD,CAAAA,IAAAA,EAAA,EAAAG,EAAA,CAAA,ksICcMQ,GAENC,EAEHlB,EACJC,IAYZE,glHCdI,SAAAgB,GAAA,CAAA,IAAAC,EAAA,qGAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,qGAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,WAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA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A,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,kBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,E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"}