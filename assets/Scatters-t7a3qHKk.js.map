{"version":3,"file":"Scatters-t7a3qHKk.js","sources":["../../src/lib/components/Plots/Scatter/Scatter/useTooltip.ts","../../src/lib/components/Plots/Scatter/Scatter/ScatterBase.tsx","../../src/lib/components/Plots/Scatter/Scatter/Scatter.tsx","../../src/lib/components/Plots/Scatter/Scatter/index.ts","../../src/lib/components/Plots/Scatter/Scatters.tsx"],"sourcesContent":["import { scatter } from \"@chart-io/core\";\nimport { IColor, IDatum, IMouseEvent } from \"@chart-io/core\";\n\nimport { useEffect, useState } from \"react\";\nimport { useStore } from \"react-redux\";\n\ninterface ITooltipParams {\n    datum: IDatum;\n    event: IMouseEvent;\n    fillColor: IColor;\n}\n\n/**\n * Handles the user interacting with a DataPoint on the Scatter chart and the need to display a tooltip\n * @param  x            The key for the x value\n * @param  y            The key for the y value\n * @return              A function to set the tooltip datum\n */\nexport function useTooltip({ x, y }: Omit<scatter.IScatterTooltipProps, \"dispatch\" | \"color\" | \"event\" | \"datum\">) {\n    const { dispatch } = useStore();\n    const [datum, setDatum] = useState(null);\n    const [color, setColor] = useState(null);\n    const [positionEvent, setPositionEvent] = useState(null);\n\n    useEffect(() => {\n        return scatter.tooltip({ dispatch, datum, color, event: positionEvent, x, y });\n    }, [dispatch, color, x, y, positionEvent]);\n\n    /**\n     * A function to set the tooltip parameters\n     * @param  tooltipParams    The configuration for the tooltip\n     */\n    return (tooltipParams: ITooltipParams) => {\n        if (!tooltipParams) {\n            setDatum(undefined);\n            setColor(undefined);\n            setPositionEvent(undefined);\n            return;\n        }\n\n        const { datum, event, fillColor } = tooltipParams;\n\n        setDatum(datum);\n        setColor(fillColor);\n        setPositionEvent(event);\n    };\n}\n","import { chartSelectors, d3, IState, scatter } from \"@chart-io/core\";\nimport { IEventPlotProps } from \"@chart-io/core\";\n\nimport { useSelector } from \"react-redux\";\n\nimport { useFocused } from \"./useFocused\";\nimport { useTooltip } from \"./useTooltip\";\n\nimport { useLegendItem, useRender } from \"../../../../hooks\";\nimport { renderCanvas } from \"../../renderCanvas\";\n\nexport interface IScatterBaseProps extends IEventPlotProps {\n    /**\n     * The optional key of the field used for the relative z size. This overrides the radius\n     */\n    z?: string;\n    /**\n     * The fixed radius to use for points. This is ignored if z is provided\n     */\n    radius?: number;\n    /**\n     * This is an internally used function to allow the scatter plot to render to a virtual canvas\n     */\n    renderVirtualCanvas?: (update: d3.Transition<Element, unknown, any, unknown>) => void;\n}\n\n/**\n * Represents a base Scatter plot that is common across both SVG and Canvas based charts\n * @param  props       The set of React properties\n * @return             The Scatter plot component\n */\nexport function ScatterBase({\n    x,\n    y,\n    z,\n    canvas,\n    renderVirtualCanvas,\n    radius = 5,\n    color,\n    scaleMode = \"plot\",\n    showInLegend = true,\n    interactive = true,\n    onMouseOver,\n    onMouseOut,\n    onClick,\n    layer,\n}: IScatterBaseProps) {\n    const data = useSelector((s: IState) => chartSelectors.data(s));\n    const width = useSelector((s: IState) => chartSelectors.dimensions.width(s));\n    const height = useSelector((s: IState) => chartSelectors.dimensions.height(s));\n    const xScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, x, scaleMode));\n    const yScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, y, scaleMode));\n    const zScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, z, scaleMode));\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const animationDuration = useSelector((s: IState) => chartSelectors.animationDuration(s));\n\n    // This useEffect handles mouseOver/mouseExit through the use of the `focused` value\n    const fillColor = d3.color(`${color ?? theme.series.colors[0]}`);\n    const strokeColor = fillColor.darker();\n    fillColor.opacity = theme.series.opacity;\n\n    useLegendItem(y, \"circle\", showInLegend, fillColor);\n\n    const onFocus = useFocused({ xScale, yScale });\n    const onTooltip = useTooltip({ x, y });\n\n    // This is the main render function\n    useRender(() => {\n        const { update, exit } = scatter.render({\n            animationDuration,\n            interactive,\n            radius,\n            layer: layer.current,\n            data,\n            fillColor,\n            strokeColor,\n            onMouseOver,\n            onMouseOut,\n            onClick,\n            onFocus,\n            onTooltip,\n            theme,\n            x,\n            y,\n            z,\n            xScale,\n            yScale,\n            zScale,\n        });\n\n        renderCanvas(canvas, renderVirtualCanvas, width, height, update, exit);\n    }, [\n        x,\n        y,\n        data,\n        canvas,\n        renderVirtualCanvas,\n        xScale,\n        yScale,\n        layer,\n        animationDuration,\n        onMouseOver,\n        onMouseOut,\n        onClick,\n    ]);\n\n    return null;\n}\n","import React from \"react\";\n\nimport { withCanvas, withSVG, withXYPlot } from \"../../../../hoc\";\n\nimport { IScatterBaseProps, ScatterBase } from \"./ScatterBase\";\n\nexport interface IScatterProps extends Omit<IScatterBaseProps, \"layer\" | \"canvas\"> {\n    /**\n     * Should Canvas be used instead of SVG?\n     */\n    useCanvas?: boolean;\n}\n\nconst CanvasScatter = withCanvas(withXYPlot<IScatterProps>(ScatterBase), \"plot scatter\");\nconst SVGScatter = withSVG(withXYPlot<IScatterProps>(ScatterBase), \"plot scatter\");\n\n/**\n * Represents a Scatter plot\n * @param  useCanvas   Should Canvas be used instead of SVG?\n * @param  props       The set of React props\n * @return             The Scatter plot component\n */\nexport function Scatter({ useCanvas = false, ...props }: IScatterProps) {\n    if (useCanvas) {\n        return <CanvasScatter {...props} />;\n    }\n\n    return <SVGScatter {...props} />;\n}\n\nScatter.requiresVirtualCanvas = true;\nScatter.isPlot = true;\nScatter.brush = {\n    horizontal: true,\n    vertical: true,\n};\nScatter.zoom = {\n    horizontal: true,\n    vertical: true,\n};\n","export * from \"./Scatter\";\nexport * from \"./ScatterBase\";\n","import { chartSelectors, IState } from \"@chart-io/core\";\nimport type { IPlotsProps } from \"@chart-io/core\";\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { Scatter } from \"./Scatter\";\n\nexport interface IScattersProps extends IPlotsProps {\n    /**\n     * The fixed radius to use for points. This is ignored if z is provided\n     */\n    radius?: number;\n}\n\n/**\n * Represents a set of Scatter Plots\n * @param  props       The set of React properties\n * @return             The Scatter plot component\n */\nexport function Scatters({ x, ys, radius, colors, ...props }: IScattersProps) {\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const palette = colors || theme.series.colors;\n\n    return (\n        <React.Fragment>\n            {ys.map((y, i) => (\n                <Scatter {...props} key={y} y={y} x={x} radius={radius} color={palette[i]} />\n            ))}\n        </React.Fragment>\n    );\n}\n\nScatters.requiresVirtualCanvas = true;\nScatters.isPlot = true;\nScatters.brush = {\n    horizontal: true,\n    vertical: true,\n};\nScatters.zoom = {\n    horizontal: true,\n    vertical: true,\n};\n"],"names":["useTooltip","x","y","cov_m20svbgvs","f","dispatch","s","useStore","datum","setDatum","useState","color","setColor","positionEvent","setPositionEvent","cov_1alz4rruav","path","hash","global","gcv","coverageData","coverage","actualCoverage","ScatterBase","z","canvas","renderVirtualCanvas","radius","b","scaleMode","showInLegend","interactive","onMouseOver","onMouseOut","onClick","layer","data","useSelector","chartSelectors","width","dimensions","height","xScale","scales","getScale","yScale","zScale","theme","animationDuration","fillColor","d3","series","colors","strokeColor","darker","opacity","useLegendItem","onFocus","useFocused","onTooltip","useRender","update","exit","scatter","render","current","CanvasScatter","cov_1x8ot3m3ap","withCanvas","withXYPlot","SVGScatter","withSVG","cov_25tiaho3to","Scatters","ys","props","cov_spx7yahl4"],"mappings":"y9JAwCQ,SAAQA,EAAO,CAAAC,EAAAA,EAAAC,EAAAA,CAAO,EAAc,CAAAC,EAAAC,EAAAA,EAEpC,CAAA,IAAA,KAAA,CAAAC,SAAAA,CAAc,GAAAF,IAAAG,EAAAC,CAAAA,IAAAA,EAAA,GACd,CAAAC,EAAkBC,CAAA,GAAAN,IAAAG,EAAA,CAAA,IAAAI,EAAAA,SAAA,IAAA,GAClB,CAAAC,EAAAC,CAAsB,GAAAT,EAAAG,EAAAA,EAAAI,CAAAA,IAAAA,EAAA,SAAA,IAAA,GAC1B,CAAAG,EAAAC,CAAA,GAAAX,IAAAG,EAAA,CAAA,IAAAI,EAAAA,SAAA,IAAA,GAAAP,OAAAA,EAAAG,EAAAA,yXCwBQ,SAAAS,GAAA,CAAA,IAAAC,EAAA,8GAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,8GAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,cAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA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"}