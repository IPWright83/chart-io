{"version":3,"file":"index-D50cK_1g.js","sources":["../../src/lib/components/Axis/Axis/getD3Axis.ts","../../src/lib/components/Axis/Axis/getTransform.ts","../../src/lib/components/Axis/Axis/Gridlines/getTickSize.ts","../../src/lib/components/Axis/Axis/Gridlines/index.ts","../../src/lib/components/Axis/Axis/Title/getTransform.ts","../../src/lib/components/Axis/Axis/Title/index.ts","../../src/lib/components/Axis/Axis/index.ts","../../src/lib/components/Scale/calculateScale.ts","../../src/lib/components/Scale/index.ts","../../src/lib/hoc/canvas/virtual/addEventHandlers.ts","../../src/lib/hoc/canvas/virtual/removeEventHandlers.ts","../../src/lib/hoc/canvas/virtual/renderVirtualElements.ts","../../src/lib/hoc/canvas/virtual/renderVirtualCanvas.ts","../../src/lib/hoc/canvas/virtual/clearVirtualCanvas.ts","../../src/lib/hoc/canvas/virtual/index.ts","../../src/lib/components/VirtualCanvas/getChildrenWithProps.ts","../../src/lib/components/VirtualCanvas/isVirtualCanvasRequired.ts","../../src/lib/components/VirtualCanvas/VirtualCanvas.tsx","../../src/lib/components/Chart/getTheme.ts","../../src/lib/components/Chart/exportAsImage.ts","../../src/lib/components/Chart/generateRandomID.ts","../../src/lib/components/Chart/Chart.tsx"],"sourcesContent":["import { d3, logAndThrowError } from \"@chart-io/core\";\nimport type { IPosition, IScale } from \"@chart-io/core\";\n\n/**\n * Return a D3 Axis function\n * @param  position     The position of the axis [left, right, top, bottom]\n * @param  scale        The D3 scale being used by the axis\n * @return              The D3 selection Axis - https://github.com/d3/d3-axis\n */\nconst getD3Axis = (position: IPosition, scale: IScale): d3.Axis<d3.AxisDomain> => {\n    switch (position) {\n        case \"left\":\n            return d3.axisLeft(scale as d3.AxisScale<d3.AxisDomain>);\n        case \"right\":\n            return d3.axisRight(scale as d3.AxisScale<d3.AxisDomain>);\n        case \"top\":\n            return d3.axisTop(scale as d3.AxisScale<d3.AxisDomain>);\n        case \"bottom\":\n            return d3.axisBottom(scale as d3.AxisScale<d3.AxisDomain>);\n        default:\n            // istanbul ignore next\n            logAndThrowError(\"E002\", `Invalid position (${position}) was provided to the Axis`);\n    }\n};\n\nexport { getD3Axis };\n","import type { IMargin, IPosition } from \"@chart-io/core\";\nimport { logAndThrowError } from \"@chart-io/core\";\n\n/**\n * Obtain the transform for the Axis group\n * @param  position     The position of the axis [left, right, top, bottom]\n * @param  plotWidth    The width for the plot\n * @param  plotHeight   The height for the plot\n * @param  margin       The margin object for the chart\n * @return              The transform\n */\nexport function getTransform(position: IPosition, plotWidth: number, plotHeight: number, margin: IMargin): string {\n    if (plotWidth === 0 || plotHeight === 0) {\n        return \"translate(0, 0)\";\n    }\n\n    switch (position) {\n        case \"left\":\n            return `translate(${margin.left}, 0)`;\n        case \"right\":\n            return `translate(${plotWidth + margin.left}, 0)`;\n        case \"top\":\n            return `translate(0, ${margin.top})`;\n        case \"bottom\":\n            return `translate(0, ${plotHeight + margin.top})`;\n        default:\n            logAndThrowError(\"E002\", `Invalid position (${position}) was provided to the Axis`);\n    }\n}\n","import type { IPosition } from \"@chart-io/core\";\nimport { logAndThrowError } from \"@chart-io/core\";\n\n/**\n * Obtain the tick size used for gridlines\n * @param  position     The position of the axis [left, right, top, bottom]\n * @param  plotWidth    The width for the plot\n * @param  plotHeight   The height for the plot\n * @return              The transform\n */\nconst getTickSize = (position: IPosition, plotWidth: number, plotHeight: number): number => {\n    if (plotWidth === 0 || plotHeight === 0) {\n        return 0;\n    }\n\n    switch (position) {\n        case \"left\":\n        case \"right\":\n            return plotWidth;\n        case \"top\":\n        case \"bottom\":\n            return plotHeight;\n        default:\n            logAndThrowError(\"E002\", `Invalid position (${position}) was provided to the Axis`);\n    }\n};\n\nexport { getTickSize };\n","import { Gridlines as GridlinesBase, IGridlinesBaseProps } from \"./Gridlines\";\nimport { withSVG } from \"../../../../hoc\";\n\nimport { getTickSize } from \"./getTickSize\";\n\nexport type IGridlinesProps = Omit<IGridlinesBaseProps, \"layer\">;\n\nexport const Gridlines = withSVG<IGridlinesProps>(GridlinesBase, \"gridlines\");\n\n// @ts-expect-error: Extending the interface on purpose\nGridlines.getTickSize = getTickSize;\n","import type { IMargin, IPosition } from \"@chart-io/core\";\nimport { logAndThrowError } from \"@chart-io/core\";\n\n/**\n * Obtain the transform for the Axis title\n * @param  position     The position of the axis [left, right, top, bottom]\n * @param  width        The width for the plot\n * @param  height       The height for the plot\n * @param  margin       The margin object for the chart\n * @return              The transform\n */\nexport function getTransform(position: IPosition, width: number, height: number, margin: IMargin): string {\n    if (width === 0 || height === 0) {\n        return \"translate(0, 0)\";\n    }\n\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n\n    switch (position) {\n        case \"left\":\n            return `translate(${margin.left / 2 - 25}, ${halfHeight + margin.top / 2})rotate(270)`;\n        case \"right\":\n            return `translate(${margin.left + width + margin.right / 2 + 25}, ${\n                halfHeight + margin.top / 2\n            })rotate(270)`;\n        case \"top\":\n            return `translate(${halfWidth + margin.left / 2}, ${margin.top - 25})`;\n        case \"bottom\":\n            return `translate(${halfWidth + margin.left / 2}, ${height + margin.top + 35})`;\n        default:\n            logAndThrowError(\"E002\", `Invalid position (${position}) was provided to the Axis`);\n    }\n}\n","import { ITitleProps, Title } from \"./Title\";\n\nimport { getTransform } from \"./getTransform\";\n\n// @ts-expect-error: extending the interface on purpose\nTitle.getTransform = getTransform;\n\nexport { Title };\nexport type { ITitleProps };\n","import { Axis as AxisBase, IAxisProps } from \"./Axis\";\nimport { withSVG } from \"../../../hoc\";\n\nimport { Gridlines } from \"./Gridlines\";\nimport { Title } from \"./Title\";\n\nimport { getD3Axis } from \"./getD3Axis\";\nimport { getTransform } from \"./getTransform\";\n\nconst Axis = withSVG(AxisBase, \"axis\");\n\n// @ts-expect-error: Extending the interface on purpose\nAxis.getD3Axis = getD3Axis;\n\n// @ts-expect-error: Extending the interface on purpose\nAxis.getTransform = getTransform;\n\n// istanbul ignore next\nexport { Axis, Gridlines, Title };\nexport type { IAxisProps };\n","import type { IData, IScale, IScaleType, IValue } from \"@chart-io/core\";\nimport { d3, detection, logAndThrowError, logDebug } from \"@chart-io/core\";\n\nconst { getDataType, Type, typeEnumToName } = detection;\n\n/**\n * Return a scale as defined by the scaleType property\n * @param  scaleType    The scaletype, one of [linear, time, power, log, band, point]\n * @param  values       The set of values\n * @param  range        The physical screen space avaliable for this scale\n * @param  domain       Override the domain for the scale\n * @return              A d3.Scale function\n */\nconst getScaleTypeFromType = (scaleType: IScaleType, values: IValue[], range: number[], domain: IValue[]): IScale => {\n    if (scaleType === \"band\") {\n        return d3\n            .scaleBand() // @ts-ignore\n            .domain(domain ?? values)\n            .range(range)\n            .paddingOuter(0.05)\n            .paddingInner(0.05);\n    }\n\n    if (scaleType === \"point\") {\n        return d3\n            .scalePoint() // @ts-ignore\n            .domain(domain ?? values)\n            .range(range);\n    }\n\n    const minValue = d3.min(values as d3.NumberValue[]);\n    const maxValue = d3.max(values as d3.NumberValue[]);\n    const zeroOrMin = d3.min([0, minValue]);\n\n    switch (scaleType) {\n        case \"power\":\n            return d3\n                .scalePow() // @ts-ignore\n                .domain(domain ?? [zeroOrMin, maxValue])\n                .range(range);\n\n        case \"linear\":\n            return d3\n                .scaleLinear() // @ts-ignore\n                .domain(domain ?? [zeroOrMin, maxValue])\n                .range(range)\n                .nice();\n\n        case \"time\":\n            return d3\n                .scaleTime() // @ts-ignore\n                .domain(domain ?? [minValue, maxValue])\n                .range(range);\n\n        case \"log\":\n            return d3\n                .scaleLog() // @ts-ignore\n                .domain(domain ?? [zeroOrMin, maxValue])\n                .range(range);\n        default:\n            logAndThrowError(\"E007\", `Unknown scale type: ${scaleType}`);\n    }\n};\n\n/**\n * Returns the set of values to aggregate\n * @param  data          The chart data set\n * @param  fields        The fields to use for the scale\n * @param  aggregate     Should the values be aggregated?\n * @return               An array of the values\n */\nconst getValues = (data: IData, fields: string[], aggregate: boolean): IValue[] => {\n    if (aggregate) {\n        return data.map((d) =>\n            fields.reduce((sum, key) => {\n                const value = d[key];\n                return value ? sum + +value : sum;\n            }, 0),\n        );\n    }\n\n    return fields.flatMap((field) => data.map((d) => d[field])).filter((v) => v !== null && v !== undefined);\n};\n\n/**\n * Obtain a Scale for the particular axis\n * @param  data        The chart data set\n * @param  fields      The fields to use for the scale\n * @param  range       The physical screen space avaliable for this scale\n * @param  domain      Override the domain for the scale\n * @param  aggregate   Should the values be aggregated?\n * @param  scaleType   Override the type of scale to use rather than determing dynamically. One of [linear, time, power, log, band, point]\n * @return             A d3.Scale function\n */\nconst calculateScale = (\n    data: IData,\n    fields: string[],\n    range: number[],\n    domain: IValue[],\n    aggregate: boolean,\n    scaleType?: IScaleType,\n): IScale => {\n    // Grab all the values\n    const values = getValues(data, fields, aggregate);\n\n    // Use the specified scale type if provided\n    if (scaleType) {\n        logDebug(`Manually assigning scale ${scaleType}`, fields);\n        return getScaleTypeFromType(scaleType, values, range, domain);\n    }\n\n    // Otherwise attempt to determine the types of the values\n    // @ts-ignore: TODO: How do we fix this?\n    const type = values.reduce((previousType, value) => getDataType(value, previousType), undefined);\n\n    switch (type) {\n        case Type.Integer:\n        case Type.Double:\n            logDebug(`Automatically assigning scale (linear) for data type (${typeEnumToName(type)})`, fields);\n            return getScaleTypeFromType(\"linear\", values, range, domain);\n\n        case Type.Date:\n        case Type.DateTime:\n            logDebug(`Automatically assigning scale (time) for data type (${typeEnumToName(type)})`, fields);\n            return getScaleTypeFromType(\"time\", values, range, domain);\n\n        case Type.String:\n        case Type.Boolean:\n            logDebug(`Automatically assigning scale (band) for data type (${typeEnumToName(type)})`, fields);\n            return getScaleTypeFromType(\"band\", values, range, domain);\n\n        default:\n            return null;\n    }\n};\n\nexport { calculateScale };\n","export * from \"./Scale\";\nexport * from \"./AutoScale\";\nexport * from \"./XScale\";\nexport * from \"./YScale\";\nexport * from \"./ZScale\";\n","import { eventActions, IDispatch, MOUSE_MOVE_THROTTLE } from \"@chart-io/core\";\nimport type { IDatum } from \"@chart-io/core\";\n\nimport { throttle } from \"lodash\";\n\nimport type { IColorToData, IColorToDataMap } from \"./types\";\n\n/**\n * Crazy interface for TypeScript gymnastics\n */\ninterface EventElement extends Element {\n    __on:\n    | {\n        find: (handler) => {\n            value: (node: HTMLElement, e: MouseEvent, datum: IDatum) => void;\n        };\n    }\n    | undefined;\n}\n\n/**\n * Fire the Click event if it exists on the node\n * @param  datum          The datum\n * @param  element        The node that triggered the event\n * @param  e              The MouseEventArgs\n */\nconst triggerOnClick = (datum: IDatum, element: Element, e: MouseEvent) => {\n    const node = element as EventElement;\n    if (!node || !node.__on) {\n        // istanbul ignore next\n        return;\n    }\n\n    const onClick = node.__on.find((handler) => handler.type === \"click\");\n    if (onClick) {\n        onClick.value.call(node, e, datum);\n    }\n};\n\n/**\n * Fire the MouseOver event if it exists on the node\n * @param  datum          The datum\n * @param  element        The node that triggered the event\n * @param  e              The MouseEventArgs\n */\nconst triggerOnMouseOver = (datum: IDatum, element: Element, e: MouseEvent) => {\n    const node = element as EventElement;\n    if (!node || !node.__on) {\n        // istanbul ignore next\n        return;\n    }\n\n    const onMouseOver = node.__on.find((handler) => handler.type === \"mouseover\");\n    if (onMouseOver) {\n        onMouseOver.value.call(node, e, datum);\n    }\n};\n\n/**\n * Fire the MouseOut event if it exists on the node\n * @param  datum          The datum\n * @param  element        The node that triggered the event\n * @param  e              The MouseEventArgs\n */\nconst triggerOnMouseOut = (datum: IDatum, element: Element, e: MouseEvent) => {\n    const node = element as EventElement;\n    if (!node || !node.__on) {\n        // istanbul ignore next\n        return;\n    }\n\n    const onMouseOut = node.__on.find((handler) => handler.type === \"mouseout\");\n    if (onMouseOut) {\n        onMouseOut.value.call(node, e, datum);\n    }\n};\n\n/**\n * Wire up events on the virtal canvas\n * @param  {HTMLElement} canvas              The virtual canvas DOM element\n * @param  {Object}      getColorMap         A map from a color to a datum\n * @param  {Function}    dispatch            The redux dispatch function\n * @returns {Object}                         The set of handlers for cleaning up { clickHandler, moveHandler }\n */\nexport const addEventHandlers = (\n    canvas: HTMLCanvasElement,\n    getColorMap: () => IColorToDataMap,\n    dispatch: IDispatch,\n) => {\n    let lastDatum = undefined;\n    let lastNode = undefined;\n\n    // This is a fairly slow operation so let's do it just the once\n    const rect = canvas.getBoundingClientRect();\n    const eventContext = canvas.getContext(\"2d\", { willReadFrequently: true });\n\n    /**\n     * Retrieve a datum from the click event\n     * @param  e   The MouseEventArgs\n     * @return     The datum if found\n     */\n    const getDatum = (e: MouseEvent): IColorToData | undefined => {\n        const colorToData: IColorToDataMap = getColorMap() ?? {};\n\n        const coords = {\n            x: e.pageX - rect.left,\n            y: e.pageY - rect.top,\n        };\n\n        const colorData = eventContext.getImageData(coords.x, coords.y, 1, 1).data;\n        const color = `rgb(${colorData[0]}, ${colorData[1]}, ${colorData[2]})`;\n        return colorToData[color];\n    };\n\n    /**\n     * Respond to a Click event\n     * @param  {MouseEventArgs} e   The mouse event\n     */\n    const clickHandler = (e: MouseEvent) => {\n        const lookup = getDatum(e);\n        if (lookup) {\n            const { datum, node } = lookup;\n            triggerOnClick(datum, node, e);\n        }\n    };\n\n    /**\n     * Respond to the Mouse Move event\n     * @param  {MouseEventArgs} e   The mouse event\n     */\n    const moveHandler = throttle((e: MouseEvent) => {\n        dispatch(eventActions.mouseMove(e));\n\n        const lookup = getDatum(e);\n        const datum = lookup?.datum;\n        const node = lookup?.node;\n\n        // Moving within a point\n        if (datum === lastDatum) {\n            return;\n        }\n\n        // Moving over the background from a point\n        if (!datum && lastDatum) {\n            // onMouseOut(lastDatum, undefined, e);\n            triggerOnMouseOut(lastDatum, lastNode, e);\n\n            // Clear out tracking variables\n            lastDatum = undefined;\n            lastNode = undefined;\n        }\n\n        if (datum) {\n            // Trigger the onMouseOver event provided by the Plot. This allows\n            // for custom rendering/interaction on a per plot basis.\n            lastDatum && triggerOnMouseOut(lastDatum, lastNode, e);\n            triggerOnMouseOver(datum, node, e);\n\n            // Tracking variables to help support the onMouseOut events\n            lastDatum = datum;\n            lastNode = node;\n        }\n    }, MOUSE_MOVE_THROTTLE);\n\n    // Register the events\n    canvas.addEventListener(\"click\", clickHandler);\n    canvas.addEventListener(\"mousemove\", moveHandler);\n    canvas.addEventListener(\"mouseout\", () => dispatch(eventActions.mouseExit()));\n    canvas.addEventListener(\"mouseover\", (e) => dispatch(eventActions.mouseEnter(e)));\n\n    // Return the events so they can be cleaned up, to prevent double registration\n    return { clickHandler, moveHandler };\n};\n","/**\n * De-register mouse events on the virtal canvas\n * @param  canvas             The virtual canvas DOM element\n * @param  clickHandler       The click handler function to remove\n * @param  moveHandler        The move handler function to remove\n */\nexport function removeEventHandlers(\n    canvas: HTMLCanvasElement | null | undefined,\n    clickHandler?: (e: MouseEvent) => void,\n    moveHandler?: (e: MouseEvent) => void\n) {\n    if (!canvas) {\n        // istanbul ignore next\n        return;\n    }\n\n    if (clickHandler) canvas.removeEventListener(\"click\", clickHandler);\n    if (moveHandler) canvas.removeEventListener(\"mousemove\", moveHandler);\n}\n","import { d3 } from \"@chart-io/core\";\n\nimport { renderElements } from \"../renderElements\";\n\n/*\n * We're doing some bit-shifting here to more clearly illustrate how\n * to derive a color from a number, but you could accomplish the same\n * thing using modulo arithmetic and division! Check out the examples\n * to see an alternative approach\n * From https://engineering.mongodb.com/post/d3-round-two-how-to-blend-html5-canvas-with-svg-to-speed-up-rendering\n */\nexport function getColor(index: number): string {\n    return d3\n        .rgb(\n            (index & 0b111111110000000000000000) >> 16,\n            (index & 0b000000001111111100000000) >> 8,\n            index & 0b000000000000000011111111\n        )\n        .toString();\n}\n\n/**\n * Renders the virtual canvas elements based on the join\n * @param  context         The Canvas context object to render to\n * @param  join            The D3 data join to render\n * @param  index           The index to start at for color generation\n * @return                 A object with the color to datum mapping\n */\n\nexport function renderVirtualElements(\n    context: CanvasRenderingContext2D,\n    join: d3.Transition<Element, unknown, any, unknown>,\n    index: number\n) {\n    const colorToData = {};\n    const colors = [];\n\n    join.each((d, i, elements) => {\n        // Get a unique color for each node so we can map from\n        // the color back to a datum. +1 to ignore white as\n        // this will be the background color of the canvas\n        const color = getColor(index);\n        colors.push(color);\n        colorToData[color] = { datum: d, node: elements[i] };\n        index++;\n    });\n\n    renderElements(context, join, colors);\n\n    return { index, colorToData };\n}\n","import { d3 } from \"@chart-io/core\";\n\nimport { renderVirtualElements } from \"./renderVirtualElements\";\nimport type { IColorToDataMap } from \"./types\";\n\n/**\n * Renders the canvas elements based on the join\n * @param  canvas         The Canvas context object to render to\n * @param  width          The width of the canvas\n * @param  height         The height of the canvas\n * @param  update         The D3 data join update object\n */\nexport async function renderVirtualCanvas(\n    canvas: HTMLCanvasElement | null | undefined,\n    width: number,\n    height: number,\n    update: d3.Transition<Element, unknown, any, unknown>[]\n): Promise<IColorToDataMap> {\n    // If the canvas isn't ready don't do anything\n    if (!canvas) {\n        // istanbul ignore next\n        return;\n    }\n\n    // Ensure we've got the contexts to draw upon\n    const context = canvas.getContext(\"2d\");\n    context.imageSmoothingEnabled = false;\n\n    // Used a manual index, as the `i` parameter for `.each` resets\n    // when dealing with a nested selection. Start at 1 to avoid choosing black\n    let index = 1;\n    let lookup = {};\n\n    for (let i = 0; i < update.length; i++) {\n        const selection = update[i].selection as unknown as d3.Transition<Element, unknown, any, unknown>;\n\n        const results = await renderVirtualElements(context, selection, index);\n        lookup = { ...lookup, ...results.colorToData };\n        index = results.index;\n    }\n\n    // Return a keyed lookup object from color -> datum\n    return lookup;\n}\n","/**\n * Clears the canvas completely\n * @param  canvas         The Canvas context object to render to\n * @param  width          The width of the canvas\n * @param  height         The height of the canvas\n */\nexport function clearVirtualCanvas(canvas: HTMLCanvasElement | null | undefined, width: number, height: number) {\n    // If the canvas isn't ready don't do anything\n    if (!canvas) {\n        // istanbul ignore next\n        return;\n    }\n\n    // Ensure we've got the contexts to draw upon\n    const context = canvas.getContext(\"2d\");\n    context.clearRect(0, 0, width, height);\n}\n","export * from \"./addEventHandlers\";\nexport * from \"./removeEventHandlers\";\nexport * from \"./renderVirtualCanvas\";\nexport * from \"./clearVirtualCanvas\";\nexport * from \"./types\";\n","import { d3 } from \"@chart-io/core\";\nimport type { IOnClick, IOnMouseOut, IOnMouseOver } from \"@chart-io/core\";\n\nimport { extendChildrenProps } from \"../../utils\";\n\nexport type IRenderVirtualCanvasFunc = (\n    update: d3.Transition<Element, unknown, any, unknown>,\n    events: {\n        onMouseOver: IOnMouseOver;\n        onMouseOut: IOnMouseOut;\n        onClick: IOnClick;\n    }\n) => void;\n\n/**\n * Adds some additional props all the children\n * @param  children                    The children of the component\n * @param  renderVirtualCanvas         Function to call to update the virtual canvas\n * @return                             The new children\n */\nexport function getChildrenWithProps(children: any, renderVirtualCanvas: IRenderVirtualCanvasFunc): any {\n    return extendChildrenProps(children, { renderVirtualCanvas });\n}\n","import { childrenToArray } from \"../../utils\";\n\n/**\n * Determine if a Virtual Canvas is required or not\n * @param  children  The child or children of the virtual canvas\n * @return           True if a virtual canvas is required, otherwise false\n */\nexport const isVirtualCanvasRequired = (children: any): boolean => {\n    return childrenToArray(children).filter((c) => c?.type?.requiresVirtualCanvas).length > 0;\n};\n","import { chartSelectors, IState } from \"@chart-io/core\";\n\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { useSelector, useStore } from \"react-redux\";\nimport { debounce } from \"lodash\";\n\nimport {\n    addEventHandlers,\n    clearVirtualCanvas,\n    IColorToDataMap,\n    removeEventHandlers,\n    renderVirtualCanvas,\n} from \"../../hoc/canvas/virtual\";\n\nimport { getChildrenWithProps } from \"./getChildrenWithProps\";\nimport type { IRenderVirtualCanvasFunc } from \"./getChildrenWithProps\";\nimport { isVirtualCanvasRequired } from \"./isVirtualCanvasRequired\";\n\nexport const VIRTUAL_CANVAS_DEBOUNCE = 100;\n\nexport interface IVirtualCanvasProps {\n    /**\n     * The plots that are children of the virtual canvas\n     */\n    children: JSX.Element;\n}\n\n/**\n * The virtual canvas, draws elements to a non dom canvas and is used to\n * simulate mouse events on these elements\n * @param  {Object} props   The react props\n * @return {ReactElement}   A virtual canvas to add mouse events to canvas layers\n */\nexport function VirtualCanvas({ children }: IVirtualCanvasProps) {\n    const width = useSelector((s: IState) => chartSelectors.dimensions.width(s));\n    const height = useSelector((s: IState) => chartSelectors.dimensions.height(s));\n    const store = useStore();\n\n    // This is going to be used for the main color -> datum lookup.\n    // We need to use a useRef so dependencies (wiring up events) don't re-occur forcing a re-render loop\n    const colorToData = useRef<IColorToDataMap>({});\n    const canvasRef = useRef<HTMLCanvasElement>();\n\n    // We can't trigger a useEffect when the colorToData ref changes so\n    // instead we use a callback function to ensure we always grab the\n    // correct reference when trying to do our data lookups in the\n    // addEventHandlers function\n    const getColorMap = useCallback(() => colorToData.current, [colorToData.current]);\n\n    // Adds event handlers to the canvas for triggering events\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        if (!canvas || !store) {\n            return;\n        }\n\n        const { clickHandler, moveHandler } = addEventHandlers(canvas, getColorMap, store.dispatch);\n        return () => {\n            removeEventHandlers(canvas, clickHandler, moveHandler);\n        };\n    }, [canvasRef.current, store, getColorMap]);\n\n    // This is a set of transient nodes, use as part of a debounced render function\n    let nodes = [];\n\n    // Render all the virtual nodes - this is debounced to ensure that we only trigger it once\n    // after all of the child layers finished their render as we don't want layers to overwrite each other\n    const renderAllVirtualNodes = debounce(async () => {\n        const canvas = canvasRef.current;\n        if (!canvas) {\n            return;\n        }\n\n        // Clear and re-render the virtual canvas\n        clearVirtualCanvas(canvas, width, height);\n        colorToData.current = await renderVirtualCanvas(canvas, width, height, nodes);\n        nodes = [];\n    }, VIRTUAL_CANVAS_DEBOUNCE);\n\n    // Whenever a child (canvas layer) renders it'll call this renderVirtual function\n    // at the end of its render loop. We need to ensure that all nodes (virtual dom elements)\n    // exist within the dataset and then render the virtual canvas\n    const renderVirtual: IRenderVirtualCanvasFunc = (update, events) => {\n        nodes = [\n            ...nodes,\n            {\n                selection: update,\n                events,\n            },\n        ];\n\n        renderAllVirtualNodes();\n    };\n\n    // Many layers don't require the virtual canvas. If\n    // they are all of these types then disable the canvas\n    const includeVirtualCanvas = isVirtualCanvasRequired(children);\n    if (includeVirtualCanvas === false) {\n        return <React.Fragment>{children}</React.Fragment>;\n    }\n\n    // We need to extend the child components to provide the renderVirtual callback down\n    // which will automatically be called by any Canvas based layers\n    const childrenWithProps = getChildrenWithProps(children, renderVirtual);\n\n    const style = {\n        position: \"absolute\" as const,\n        opacity: 0,\n        left: 0,\n        top: 0,\n        zindex: 10000,\n    };\n\n    return (\n        <React.Fragment>\n            {childrenWithProps}\n            <foreignObject className=\"fo\" width={width} height={height}>\n                <canvas className=\"virtual-canvas\" width={width} height={height} ref={canvasRef} style={style}></canvas>\n            </foreignObject>\n        </React.Fragment>\n    );\n}\n","import type { ITheme } from \"@chart-io/core\";\nimport { themes } from \"@chart-io/core\";\n\n/**\n * Gets the theme from the name\n * @param  theme   Either the name of a theme, or a custom theme object\n * @return         The theme\n */\nexport function getTheme(theme: ITheme | \"light\" | \"dark\"): ITheme {\n    switch (theme) {\n        case \"light\":\n            return themes.light;\n        case \"dark\":\n            return themes.dark;\n        default:\n            return theme;\n    }\n}\n","import { downloadFile, exportImage, logDebug } from \"@chart-io/core\";\nimport { ITheme } from \"@chart-io/core\";\n\nimport { getTheme } from \"./getTheme\";\n\n/**\n * Exports the chart as an image\n * @param {HTMLElement} svgNode     The SVG node to save\n * @param {ITheme} theme            The current theme of the chart\n * @param {number} width            The width of the chart\n * @param {number} height           The height of the height\n * @return {Function}               A function that will trigger the export\n */\nexport function exportAsImage(svgNode: HTMLElement, theme: \"light\" | \"dark\" | ITheme, width: number, height: number) {\n    /**\n     * Function to trigger the actual export\n     * @param  {string} filename        The filename to export to\n     * @param {\"PNG\" | \"JPG\"} format    The format of the export\n     * @param {number} scale            The scale of the image\n     * @return {Promise<string>}        A promise that resolves with the PNG data in string format\n     */\n    return async (filename: string, format: \"PNG\" | \"JPG\" = \"PNG\", scale = 1) => {\n        const fileExtension = format === \"PNG\" ? \"png\" : \"jpg\";\n        logDebug(`Saving chart to ${filename}.${fileExtension}`);\n\n        const imageData = await exportImage(svgNode, getTheme(theme), width, height, format, scale);\n        downloadFile(imageData, `${filename}.${fileExtension}`);\n\n        return imageData;\n    };\n}\n","/**\n * Generates a random ID - https://stackoverflow.com/a/6860916/21061\n * @return The random ID that has been generated\n */\nexport function generateRandomID() {\n   const S4 = function () {\n      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n   };\n\n   return S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4();\n}\n","import { chartActions, exportImage } from \"@chart-io/core\";\nimport type { IData, IMargin, IOnClick, IOnMouseOut, IOnMouseOver, ITheme } from \"@chart-io/core\";\n\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef } from \"react\";\nimport { useStore } from \"react-redux\";\n\nimport { VirtualCanvas } from \"../VirtualCanvas\";\n\nimport { exportAsImage } from \"./exportAsImage\";\nimport { generateRandomID } from \"./generateRandomID\";\nimport { getChildrenWithProps } from \"./getChildrenWithProps\";\nimport { getTheme } from \"./getTheme\";\n\nconst DEFAULT_MARGIN = { left: 30, top: 30, right: 30, bottom: 30 };\n\nexport interface IChartBaseProps {\n    /**\n     * Optionally override the ID\n     */\n    id?: string;\n    /**\n     * The child components for the chart\n     */\n    children?: JSX.Element | JSX.Element[];\n    /**\n     * The time in milliseconds to spend animating data transitions\n     * @default 250\n     */\n    animationDuration?: number;\n    /**\n     * The width of the chart\n     * @default 500\n     */\n    width?: number;\n    /**\n     * The height of the chart\n     * @default 500\n     */\n    height?: number;\n    /**\n     * The margin of the plot portion of the chart\n     * @default { left: 30, top: 30, right: 30, bottom: 30 }\n     */\n    plotMargin?: IMargin;\n    /**\n     * The data for the chart\n     */\n    data?: IData;\n    /**\n     * Should all the plots use an HTML Canvas instead of SVG?\n     * @default false\n     */\n    useCanvas?: boolean;\n    /**\n     * A function that will be triggered whenever the mouse moves over an element for the first time\n     * @default undefined\n     */\n    onMouseOver?: IOnMouseOver;\n    /**\n     * A function that will be triggered whenever the mouse moves out an element\n     * @default undefined\n     */\n    onMouseOut?: IOnMouseOut;\n    /**\n     * A function that will be triggered whenever the mouse clicks on an element\n     * @default undefined\n     */\n    onClick?: IOnClick;\n    /**\n     * The name of the theme to use or a custom theme\n     * @default \"light\"\n     */\n    theme?: \"light\" | \"dark\" | ITheme;\n}\n\nexport interface IChartRef {\n    /**\n     * Saves the chart as a PNG or JPG\n     * @param  {string} filename     The filename to save the chart to\n     * @param {\"PNG\" | \"JPG\"} format    The format of the export\n     * @param {number} scale            The scale of the image\n     * @return {Promise<string>}     Resolves with the PNG data\n     */\n    exportImage: (filename: string, format?: \"PNG\" | \"JPG\", scale?: number) => Promise<string>;\n    /**\n     * Return the chart as a base64 PNG\n     * @return {Promise<string>}     Resolves with the base64 PNG data\n     */\n    exportBase64: () => Promise<string>;\n}\n\nexport const Chart = forwardRef<IChartRef, IChartBaseProps>((props, ref) => {\n    const {\n        children,\n        id,\n        animationDuration = 250,\n        width = 500,\n        height = 500,\n        plotMargin = DEFAULT_MARGIN,\n        data,\n        useCanvas,\n        onMouseOver,\n        onMouseOut,\n        onClick,\n        theme = \"light\" as const,\n    } = props;\n\n    const store = useStore();\n    const svgNode = useRef();\n\n    useImperativeHandle(ref, () => ({\n        exportImage: exportAsImage(svgNode.current, theme, width, height),\n        exportBase64: () => exportImage(svgNode.current, getTheme(theme), width, height, \"PNG\", 1),\n    }));\n\n    // Ensure that the store is updated whenever the dimensions change. This typically\n    // triggers scale recalculations which should trigger cascading updates\n    useEffect(() => {\n        store.dispatch(chartActions.setDimensions({ width, height, margin: plotMargin }));\n    }, [store.dispatch, width, height, plotMargin]);\n\n    // Generate a unique ID for the chart which is required for clip paths\n    useEffect(() => {\n        store.dispatch(chartActions.setChartID(id ?? generateRandomID()));\n    }, [store.dispatch]);\n\n    // Ensure that the data used by all plots is updated in the store\n    useEffect(() => {\n        store.dispatch(chartActions.setChartData(data));\n    }, [store.dispatch, data]);\n\n    useEffect(() => {\n        store.dispatch(chartActions.setAnimationDuration(animationDuration));\n    }, [store.dispatch, animationDuration]);\n\n    useEffect(() => {\n        if (theme) {\n            // @ts-ignore: TODO: How do we fix this?\n            store.dispatch(chartActions.setTheme(theme));\n        }\n    }, [store.dispatch, theme]);\n\n    // We need to extend the child components to provide the common props. We do this by\n    // cloning them and piping the common props down\n    const childrenWithProps = getChildrenWithProps(\n        children,\n        useCanvas,\n        animationDuration,\n        onMouseOver,\n        onMouseOut,\n        onClick,\n    );\n\n    const themeOrCustom = getTheme(theme);\n\n    return (\n        <div ref={ref} style={{ display: \"inline-block\" }}>\n            <svg\n                className=\"chart-svg\"\n                width={width}\n                height={height}\n                ref={svgNode}\n                style={{ backgroundColor: themeOrCustom.background?.toString() }}\n            >\n                {useCanvas ? <VirtualCanvas>{childrenWithProps}</VirtualCanvas> : childrenWithProps}\n            </svg>\n        </div>\n    );\n});\n\nChart.displayName = \"Chart\";\n"],"names":["cov_1rcaco2lg","s","getD3Axis","position","scale","f","b","d3","axisLeft","axisRight","getTransform","plotWidth","plotHeight","margin","cov_100p1y7elh","cov_9mq0524r3","getTickSize","cov_1o96h7e898","actualCoverage","width","height","cov_113kyqk7vh","halfWidth","halfHeight","cov_2ioepvorf1","cov_agv6d1t9q","Axis","AxisBase","cov_1thvzw1ms8","path","hash","global","gcv","coverageData","coverage","Type","typeEnumToName","detection","getScaleTypeFromType","scaleType","values","range","domain","scaleBand","paddingOuter","paddingInner","scalePoint","minValue","min","maxValue","max","zeroOrMin","scalePow","scaleLinear","nice","scaleTime","scaleLog","logAndThrowError","cov_1wr3w8qjf3","cov_2o23nlqyl0","triggerOnClick","datum","element","e","node","__on","onClick","find","handler","type","call","triggerOnMouseOver","onMouseOver","value","triggerOnMouseOut","onMouseOut","cov_yuwvwnrcp","removeEventHandlers","index","cov_ysdp1jvnl","rgb","toString","renderVirtualCanvas","canvas","update","cov_ugyemxmfg","clearVirtualCanvas","cov_1xog5ti846","cov_2nus4r0rfv","cov_2a0u9xzy6l","cov_1rsrqxlobm","VIRTUAL_CANVAS_DEBOUNCE","VirtualCanvas","children","useSelector","chartSelectors","dimensions","store","useStore","colorToData","useRef","canvasRef","getColorMap","useCallback","current","useEffect","clickHandler","moveHandler","addEventHandlers","dispatch","nodes","renderAllVirtualNodes","debounce","cov_1u6j3isppj","getTheme","theme","cov_167ollyuey","cov_14hf91ud41","generateRandomID","S4","DEFAULT_MARGIN","cov_1j9nii7gbm","left","top","right","bottom"],"mappings":"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A,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gcccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GA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,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iccccccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,EAAA,eAAA,CAAA,QAAA,EAAA,KAAA,KAAA,QAAA,CAAA,mGAAA,EAAA,MAAA,CAAA,EAAA,SAAA,w4DAAA,EAAA,gBAAA,2CAAA,KAAA,0CAAA,EAAAC,EAAAH,EAAAC,CAAA,IAAAD,EAAAC,CAAA,EAAA,CAAA,IAAA,CAAAE,EAAAL,CAAA,GAAAK,EAAAL,CAAA,EAAA,OAAAC,KAAAI,EAAAL,CAAA,EAAAI,GAAA,IAAAf,EAAAgB,EAAAL,CAAA,EAAA8B,OAAAA,EAAA,UAAA,CAAA,OAAAzC,CAAA,EAAAA,CAAA,CAAAyC,IA7FKA,IAAA1D,EAAA,CAAA,IAyCT,MACJ2D,GAAAA,CAAAC,EAAAC,EAAAC,IAAA,CAAAJ,IAAAtD,EAEM,CAAA,IAAA,MAAA2D,GAAAL,EAAA1D,EAAAA,EAAA6D,CAAAA,IAAAA,GACN,GADMH,EAAA,EAAA1D,EACN,CAAA,IAAgB0D,EAAA,EAAArD,EAAA0D,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,IAAAL,EAAA,EAAArD,EAAA,CAAA,EAAA,CAAA,IAAA,CAAA0D,EAAAC,MAAA,CAAAN,EAAA,EAAArD,EAAA,CAAA,EAAA,CAAA,IAAAqD,EAAA,EAAA1D,EAAA,CAAA,IAEhB,MACJ,MAAA0D,EAAA,EAAArD,EAAA,CAAA,EAAA,CAAA,IAcI,MAAgB4D,GAAAP,EAAA,EAAA1D,EAAA+D,CAAAA,IAAAA,EAAAC,KAAAE,KAAAC,IAAAT,EAAA,EAAAtD,EAAA,CAAA,IAAAsD,EAAA,EAAA1D,EAAA,CAAA,IAAAmE,EAAAC,OAAA,QAAA,GAAAV,EAAA,EAAA1D,EAAA,CAAA,IACDiE,GAAAP,EAAArD,EAAAA,EAAAqD,CAAAA,EAAAA,CAAAA,IAAAA,EAAA,EAAA1D,EAGTiE,CAAAA,IAAAA,QAAcI,KAAsBN,EAAAD,EAAAF,CAAA,GAC1CF,EAAA,EAAArD,EAAA,CAAA,EAAA,CAAA,GAOA,EAAAqD,EAAA,EAAA1D,EAAA,CAAA,IAUI,MAAAsE,GAAwBA,CAAAV,EAAAC,EAAAC,IAAA,CAAAJ,EAAA,EAAAtD,EAAA,CAAA,IAC5B,MAAA2D,GAAAL,IAAA1D,EAAA,CAAA,IAAA6D,GAMM,GANNH,EAAA,EAAA1D,EAMM,EAAA,IAAA0D,EAAArD,EAAAA,EAAA0D,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,IAAAL,EAAArD,EAAAA,EAAA,CAAA,EAAA,CAAA,IAAA,CAAA0D,EAAeC,MAAmB,CAAAN,EAAArD,EAAAA,EAAAqD,CAAAA,EAAAA,CAAAA,IAAAA,EAAA1D,EAAAA,EAEhC,EAAA,IAAA,MACM,MAAA0D,EAAA,EAAArD,EAAA,CAAA,EAAA,CAAA,IAEV,MAAAkE,GAAAb,EAAA,EAAA1D,EAAA,EAAA,IAAA+D,EAAAC,KAAAE,KAAAC,IAAAT,EAAAtD,EAAAA,EAAAsD,CAAAA,IAAAA,EAAA1D,EAAAA,EAAAmE,EAAAA,IAAAA,EAAAC,OAAA,YAAA,GAAAV,EAAA,EAAA1D,EAAA,EAAA,IACJuE,GAAAb,EAAA,EAAArD,EAAA,CAAA,EAAA,CAAA,IAAAqD,EAAA,EAAA1D,EAAA,EAAA,IAMMuE,EAAAC,MAAuBH,KAAAN,EAAmBD,EAAAF,CAAA,GACnCF,EAAA,EAAArD,EAAA,CAAA,EAAA,CAAA,GAET,EAAAqD,EAAA1D,EAAAA,EAeI,EAAA,IAAA,MAAYyE,GAAAA,CAAAb,EAAAC,EAAAC,IAAA,CAAAJ,EAAAtD,EAAAA,EACD,CAAA,IAAA,MAAA2D,GAAAL,EAAA,EAAA1D,EAAA,EAAA,IAAA6D,GACf,GADeH,IAAA1D,EAAA,EAAA,IACf0D,EAAA,EAAArD,EAAA,CAAA,EAAA,CAAA,IAAA,CAAA0D,IAAAL,IAAArD,EAAA,CAAA,EAAA,CAAA,IAAA,CAAA0D,EAAAC,MAAA,CAAAN,EAAA,EAAArD,EAAAqD,CAAAA,EAAAA,CAAAA,IAAAA,EAAA,EAAA1D,EAKiB,EAAA,IAAA,MACM,MAAA0D,IAAArD,EAIR,CAAA,EAAA,CAAA,IAAA,MAAAqE,GAAAhB,EAAA,EAAA1D,EAAA+D,EAAAA,IAAAA,EAAAC,KAAAE,KAAAC,IAAAT,EAAA,EAAAtD,EAAAsD,CAAAA,IAAAA,IAAA1D,EAAAmE,EAAAA,IAAAA,EAAAC,OAAA,WAAA,GAAAV,IAAA1D,EACf,EAAA,IAAA0E,GAAAhB,EAAA,EAAArD,EAAAqD,CAAAA,EAAAA,CAAAA,IAAAA,EAAA1D,EAAAA,EACkB0E,EAAAA,IAAAA,EAAAF,MAAAH,KAAAN,EAAAD,EAAAF,CAAA,GAGfF,EAAArD,EAAAA,EACP,CAAA,EAAA,CAAA,GAAA,EAAAqD,EAAA,EAAA1D,EAAA,EAAA,i5GCpJJ,OAAA2E,EAAA,UAAA,CAAA,OAAA1D,CAAA,EAAAA,CAAA,CAAA0D,IAAA,SAAAC,86ECiBoBC,EAAA,CAAAC,OAAAA,EAAA,EAAA1E,EAAA0E,CAAAA,IAAAA,IAAA9E,EAAA,CAAA,IAENM,EAIAyE,OACW,WAAA,IACLF,EAAK,QAA+B,EAChDA,EAAA,GACH,EAEcG,UAEf,86ECZ0B,eAAAC,GACtBC,EACJhE,EAGOC,EACXgE,gxDC3BA,OAAAC,EAAA,UAAA,CAAA,OAAAnE,CAAA,EAAAA,CAAA,CAAAmE,EAAA,EAAA,SAAAC,GAAAH,EAAAhE,EAAAC,EAAA,IAAAiE,EAAA,EAAAhF,EAAAgF,CAAAA,IAAAA,EAAA,EAAApF,s6CChBA,OAAAsF,GAAA,UAAA,CAAA,OAAArE,CAAA,EAAAA,CAAA,CAAAqE,GAAA,2/BCsBA,OAAAC,GAAA,UAAA,CAAA,OAAAtE,CAAA,EAAAA,CAAA,CAAAsE,GAAA,y4CCtBgCC,IAAAxF,EAAA,CAAA,sKCqExB,SAAAyF,GAAA,CAAA,IAAA7D,EAAA,wGAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,wGAAA,agBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA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"}