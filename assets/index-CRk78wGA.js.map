{"version":3,"file":"index-CRk78wGA.js","sources":["../../src/lib/hooks/useLegendItem.ts","../../src/lib/hooks/useLegendItems.ts","../../src/lib/hooks/useArray.ts","../../src/lib/hooks/index.ts","../../src/lib/hoc/canvas/renderCircle.ts","../../src/lib/hoc/canvas/renderRect.ts","../../src/lib/hoc/canvas/renderElements.ts","../../src/lib/utils/childrenToArray.ts","../../src/lib/utils/index.ts"],"sourcesContent":["import type { IColor, IShape } from \"@chart-io/core\";\nimport { chartActions } from \"@chart-io/core\";\n\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\n\n/**\n * Triggers adding an item to the Legend\n * @param {string}  name             The name of the series\n * @param {IShape}  shape            The shape to use for any icon in the legend\n * @param {boolean} showInLegend     True if this hook should use the legend. Setting to false bypasses the hook\n * @param {IColor}  shapeColor       The color to use for the shape\n */\nexport function useLegendItem(name: string, shape: IShape, showInLegend: boolean, shapeColor?: IColor) {\n    const dispatch = useDispatch();\n    const color = shapeColor?.toString();\n\n    useEffect(() => {\n        const legendItem = {\n            name,\n            color: color as IColor,\n            icon: shape,\n        };\n\n        if (showInLegend) {\n            dispatch(chartActions.addLegendItem(legendItem));\n        }\n\n        return () => {\n            if (showInLegend) {\n                dispatch(chartActions.removeLegendItem(legendItem));\n            }\n        };\n    }, [name, shape, color, showInLegend]);\n}\n","import type { IColor, IShape } from \"@chart-io/core\";\nimport { chartActions } from \"@chart-io/core\";\n\nimport { useEffect, useMemo } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\n/**\n * Trigger the rendering of a layer asynchronously. This is useful\n * when we expect several store updates to happen asynchronously and\n * want to render afterwards.\n *\n * An example is when the data changes we calculate new a scales, which is done off the back\n * of a render. We need both the new data and new scale to reliably render a plot\n * @param callback       The actual render function\n * @param dependencies   The set of dependencies that should trigger a re-render\n */\n\nexport function useLegendItems(names: string[], shape: IShape, showInLegend: boolean, colors?: IColor[]) {\n    const dispatch = useDispatch();\n\n    const legendItems = useMemo(() => {\n        return names.map((name, index) => ({\n            name,\n            icon: shape,\n            color: colors[index],\n        }));\n    }, [names, colors]);\n\n    useEffect(() => {\n        if (showInLegend) {\n            legendItems.forEach((legendItem) => dispatch(chartActions.addLegendItem(legendItem)));\n        }\n\n        return () => {\n            if (showInLegend) {\n                legendItems.forEach((legendItem) => dispatch(chartActions.removeLegendItem(legendItem)));\n            }\n        };\n    }, [legendItems, showInLegend]);\n}\n","import { useMemo } from \"react\";\n\n/**\n * Convert a possible string value to an array in a memoized manner.\n * @param fields       The field or set of fields\n * @return             The fields, always as an array\n */\nexport function useArray(fields: string | Array<string>): Array<string> {\n    return useMemo(() => {\n        if (fields === null || fields === undefined) {\n            return [];\n        }\n\n        if (typeof fields === \"string\") {\n            return [fields];\n        }\n\n        return fields;\n    }, [fields]);\n}\n","export * from \"./useLegendItem\";\nexport * from \"./useLegendItems\";\nexport * from \"./useRender\";\nexport * from \"./useArray\";\n","import { d3 } from \"@chart-io/core\";\nimport type { IColor } from \"@chart-io/core\";\n\n/**\n * Renders a circle to the canvas\n * @param  context             The Canvas context object to render to\n * @param  node                The virtual DOM node that represents this element\n * @param  overrideColor       A custom color to override the node color which is used for the virtual canvas\n */\nexport function renderCircle(context: CanvasRenderingContext2D, node: Element, overrideColor?: IColor) {\n    const selection = d3.select(node);\n    const cx = Number(selection.attr(\"cx\"));\n    const cy = Number(selection.attr(\"cy\"));\n    const r = Number(selection.attr(\"r\"));\n    const fill = selection.style(\"fill\");\n    const opacity = Number(selection.style(\"opacity\")) || 1;\n    const stroke = selection.style(\"stroke\");\n    const strokeWidth = Number(selection.style(\"stroke-width\")) || 1;\n\n    context.beginPath();\n\n    if (overrideColor) {\n        // We add 1 to the radius to take into account the extra\n        // stroke, which decreases the size of the circle. For\n        // small circles this can significantly decrease the hit target area\n        context.arc(cx, cy, r + 1, 0, 2 * Math.PI);\n\n        context.globalAlpha = 1;\n        context.fillStyle = `${overrideColor}`;\n        context.fill();\n\n        // We apply a white stroke. This is to deal with anti-aliasing\n        // causing offset colors to be detected, triggering an event\n        // on an incorrect data point.\n        context.strokeStyle = `rgb(255, 255, 255)`;\n        context.lineWidth = 1;\n        context.stroke();\n\n        return;\n    }\n\n    // Render on a normal canvas\n    context.arc(cx, cy, r, 0, 2 * Math.PI);\n    context.globalAlpha = opacity;\n\n    if (fill) {\n        context.fillStyle = fill;\n        context.fill();\n    }\n\n    if (stroke && stroke !== \"none\") {\n        context.strokeStyle = stroke;\n        context.lineWidth = strokeWidth;\n        context.stroke();\n    }\n}\n","import { d3 } from \"@chart-io/core\";\nimport type { IColor } from \"@chart-io/core\";\n\n/**\n * Renders a rectangle to the canvas\n * @param  context             The Canvas context object to render to\n * @param  node                The virtual DOM node that represents this element\n * @param  overrideColor       A custom color to override the node color which is used for the virtual canvas\n */\nexport function renderRect(context: CanvasRenderingContext2D, node: Element, overrideColor?: IColor) {\n    const selection = d3.select(node);\n    const x = Number(selection.attr(\"x\"));\n    const y = Number(selection.attr(\"y\"));\n    const width = Number(selection.attr(\"width\"));\n    const height = Number(selection.attr(\"height\"));\n    const fill = selection.style(\"fill\");\n    const opacity = Number(selection.style(\"opacity\")) || 1;\n    const stroke = selection.style(\"stroke\");\n    const strokeWidth = Number(selection.style(\"stroke-width\")) || 1;\n\n    context.beginPath();\n    context.rect(x, y, width, height);\n\n    if (overrideColor) {\n        // We add 1 all around the square to take into account the extra\n        // stroke, which decreases the size of the square. For\n        // small square this can significantly decrease the hit target area\n\n        context.globalAlpha = 1;\n        context.fillStyle = `${overrideColor}`;\n        context.fill();\n\n        // We apply a white stroke. This is to deal with anti-aliasing\n        // causing offset colors to be detected, triggering an event\n        // on an incorrect data point.\n        context.strokeStyle = `rgb(255, 255, 255)`;\n        context.lineWidth = 1;\n        context.stroke();\n\n        return;\n    }\n\n    context.rect(x, y, width, height);\n    context.globalAlpha = opacity;\n\n    if (fill) {\n        context.fillStyle = fill;\n        context.fill();\n    }\n\n    if (stroke && stroke !== \"none\") {\n        context.strokeStyle = stroke;\n        context.lineWidth = strokeWidth;\n        context.stroke();\n    }\n}\n","import { d3, logWarning } from \"@chart-io/core\";\nimport type { IColor } from \"@chart-io/core\";\n\nimport { renderCircle } from \"./renderCircle\";\nimport { renderRect } from \"./renderRect\";\n\n/**\n * Renders the canvas elements based on the join\n * @param  context             The Canvas context object to render to\n * @param  join                The D3 data join to render\n * @param  colors              A list of colors\n */\nexport function renderElements(\n    context: CanvasRenderingContext2D,\n    join: d3.Transition<Element, unknown, any, unknown>,\n    colors?: IColor[],\n) {\n    if (!join) {\n        return;\n    }\n\n    // Used a manual index, as the `i` parameter for `.each` resets\n    // when dealing with a nested selection. This is only needed for\n    // accessing the color\n    let index = 0;\n\n    join.each((d, i, elements) => {\n        const node = elements[i];\n        const overrideColor = colors ? colors[index++] : null;\n\n        switch (node.nodeName) {\n            case \"CIRCLE\":\n                renderCircle(context, node, overrideColor);\n                break;\n\n            case \"RECT\":\n                renderRect(context, node, overrideColor);\n                break;\n\n            default:\n                logWarning(\"W006\", `Unsupported node type: ${node.nodeName}`);\n                break;\n        }\n    });\n}\n","/**\n * Ensures the React children are an array\n * @param {any} children    A single React component, or several sReact child components\n * @returns                 The children as an array\n */\nexport function childrenToArray(children: any) {\n    // Looks like a single child which is an object\n    if (children && children.props && children.type) {\n        return [children];\n    }\n\n    return children ?? [];\n}\n","export * from \"./childrenToArray\";\nexport * from \"./extendChildrenProps\";\n"],"names":["useLegendItem","name","shape","showInLegend","shapeColor","cov_1abz532llw","f","dispatch","s","useDispatch","color","toString","useEffect","legendItem","icon","useLegendItems","names","colors","cov_29qtghik1v","legendItems","useMemo","map","index","useArray","fields","cov_17777hivvg","b","cov_1osa2w416j","actualCoverage","cov_10utrrrcij","path","hash","global","gcv","coverageData","coverage","context","node","overrideColor","selection","d3","select","cx","Number","attr","cy","r","fill","style","opacity","stroke","strokeWidth","beginPath","arc","Math","PI","globalAlpha","fillStyle","cov_18sigbce73","renderRect","x","y","width","height","rect","renderElements","join","cov_11alwugqhw","cov_1klb52rfi","childrenToArray","children","cov_1tybt6624b"],"mappings":"ogFAyBqB,SAAAA,EAA2BC,EAAAC,EAAWC,EAAAC,EAAA,CAAAC,IAAAC,OACnD,MAAAC,GAAAF,EAAA,EAAAG,OAAAC,EAAA,GAEAC,GAAAL,EAAAG,EAAAA,OAAaJ,GAAAA,YAAAA,EAAAO,YAAAN,EAAAG,EAAAA,EAEII,CAAAA,IAAAA,YAAA,IAAA,CAAAP,EAAAC,EAAAA,OACb,MAAAO,GAAAR,IAAAG,OAAA,CACJP,KAAAA,EACMS,MAAAA,EACdI,KAAAZ,k+GCAY,SAAkBa,EAAAC,EAAAd,EAAAC,EAAAc,EAAA,CAAAC,EAAA,EAAAZ,EAAA,CAAA,IACF,MAAAC,GAAAW,EAAA,EAAAV,EAAAC,CAAAA,IAAAA,EAAA,GAEpBU,GAAAD,IAAAV,EAAA,CAAA,IAAAY,EAAAA,QAAA,KAAAF,EAAAZ,EAAAA,EAAAY,CAAAA,IAAAA,EAAAV,EAAAA,EACa,CAAA,IAAAQ,EAAAK,IAAA,CAAApB,EAAaqB,KAAAJ,EAAA,EAAAZ,EAAA,CAAA,IAAAY,EAAA,EAAAV,EAClCP,CAAAA,IAAAA,CAAAA,KAAAA,0yICzBY,SAAcsB,EAAAC,EAAA,CAAAC,OAAAA,EAAA,EAAAnB,EAAAmB,CAAAA,IAAAA,EAAAjB,EAAAA,EAClB,CAAA,IAAAY,EAAA,QAAA,KAAAK,EAAA,EAAAnB,EAAAmB,CAAAA,IAAAA,IAAAjB,EAAA,CAAA,IAEOiB,EAAAC,EAAAA,EAAAF,CAAAA,EAAAA,CAAAA,IAAAA,IAAA,OAAAC,EAAAC,EAAAA,EAAAF,CAAAA,EAAAA,CAAAA,IAAAA,IAAA,SAAAC,IAAAC,EAAA,CAAA,EAAA,CAAA,IAAAD,EAAA,EAAAjB,OACA,CAAA,IACfiB,IAAAC,EAAAD,CAAAA,EAAAA,CAAAA,IAAAA,EAAA,EAAAjB,EAAA,CAAA,2uBCnBA,OAAAmB,EAAA,UAAA,CAAA,OAAAC,CAAA,EAAAA,CAAA,CAAAD,EAAA,ECoD4B,SAAAE,GAAA,CAAA,IAAAC,EAAA,wFAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,wFAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,eAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CA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"}