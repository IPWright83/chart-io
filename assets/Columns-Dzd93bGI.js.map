{"version":3,"file":"Columns-Dzd93bGI.js","sources":["../../src/lib/components/Plots/Column/useTooltip.ts","../../src/lib/components/Plots/Column/Column/ColumnBase.tsx","../../src/lib/components/Plots/Column/Column/Column.tsx","../../src/lib/components/Plots/Column/Column/index.ts","../../src/lib/components/Plots/Column/StackedColumn/StackedColumnBase.tsx","../../src/lib/components/Plots/Column/StackedColumn/StackedColumn.tsx","../../src/lib/components/Plots/Column/StackedColumn/index.ts","../../src/lib/components/Plots/Column/GroupedColumn/GroupedColumnBase.tsx","../../src/lib/components/Plots/Column/GroupedColumn/GroupedColumn.tsx","../../src/lib/components/Plots/Column/GroupedColumn/index.ts","../../src/lib/components/Plots/Column/Columns.tsx"],"sourcesContent":["import { IColor, IDatum, IMouseEvent } from \"@chart-io/core\";\nimport { column } from \"@chart-io/core\";\n\nimport { useEffect, useState } from \"react\";\nimport { useStore } from \"react-redux\";\n\ninterface ITooltipParams {\n    datum: IDatum;\n    event: IMouseEvent;\n    fillColors: IColor[];\n    ys: string[];\n}\n\n/**\n * Handles the user interacting with a DataPoint on the Column chart and the need to display a tooltip\n * @param  dispatch        The redux store dispatch function\n * @param  x               The key for the x value\n * @return                 A function to set the tooltip datum\n */\nconst useTooltip = ({ x }: Omit<column.IColumnTooltipProps, \"dispatch\" | \"datum\" | \"colors\" | \"event\" | \"ys\">) => {\n    const { dispatch } = useStore();\n    const [datum, setDatum] = useState(null);\n    const [colors, setColors] = useState(null);\n    const [ys, setYs] = useState(null);\n    const [positionEvent, setPositionEvent] = useState(null);\n\n    useEffect(() => {\n        return column.tooltip({ dispatch, datum, colors, event: positionEvent, x, ys });\n    }, [dispatch, colors, x, ys, positionEvent]);\n\n    /**\n     * A function to set the tooltip parameters\n     * @param  tooltipParams    The configuration for the tooltip\n     */\n    return (tooltipParams: ITooltipParams) => {\n        if (!tooltipParams) {\n            setDatum(undefined);\n            setColors(undefined);\n            setPositionEvent(undefined);\n            setYs(undefined);\n            return;\n        }\n\n        const { datum, event, fillColors, ys } = tooltipParams;\n\n        setColors(fillColors);\n        setPositionEvent(event);\n        setYs(ys);\n        setDatum(datum);\n    };\n};\n\nexport { useTooltip };\n","import { chartSelectors, column, d3, IState } from \"@chart-io/core\";\nimport { IEventPlotProps } from \"@chart-io/core\";\n\nimport { useSelector } from \"react-redux\";\n\nimport { useLegendItem, useRender } from \"../../../../hooks\";\n\nimport { renderCanvas } from \"../../renderCanvas\";\nimport { useFocused } from \"../useFocused\";\nimport { useTooltip } from \"../useTooltip\";\n\nexport interface IColumnBaseProps extends IEventPlotProps {\n    /**\n     * This is an internally used function to allow the scatter plot to render to a virtual canvas\n     */\n    renderVirtualCanvas?: (update: d3.Transition<Element, unknown, any, unknown>) => void;\n}\n\n/**\n * Represents a Column Plot\n * @param  props       The set of React properties\n * @return             The Column plot component\n */\nexport function ColumnBase({\n    x,\n    y,\n    canvas,\n    renderVirtualCanvas,\n    color,\n    scaleMode = \"plot\",\n    showInLegend = true,\n    interactive = true,\n    onMouseOver,\n    onMouseOut,\n    onClick,\n    layer,\n}: IColumnBaseProps) {\n    const data = useSelector((s: IState) => chartSelectors.data(s));\n    const width = useSelector((s: IState) => chartSelectors.dimensions.width(s));\n    const height = useSelector((s: IState) => chartSelectors.dimensions.height(s));\n    const xScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, x, scaleMode));\n    const yScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, y, scaleMode));\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const animationDuration = useSelector((s: IState) => chartSelectors.animationDuration(s));\n\n    const fillColor = d3.color(`${color ?? theme.series.colors[0]}`);\n    fillColor.opacity = theme.series.opacity;\n\n    useLegendItem(y, \"square\", showInLegend, fillColor);\n    const onTooltip = useTooltip({ x });\n    const onFocus = useFocused({ xScale, theme, grouped: false });\n\n    useRender(() => {\n        const { update } = column.render({\n            animationDuration,\n            interactive,\n            layer: layer.current,\n            data,\n            fillColor,\n            onMouseOver,\n            onMouseOut,\n            onClick,\n            onFocus,\n            onTooltip,\n            theme,\n            x,\n            y,\n            xScale,\n            yScale,\n        });\n\n        renderCanvas(canvas, renderVirtualCanvas, width, height, update);\n    }, [\n        x,\n        y,\n        data,\n        canvas,\n        renderVirtualCanvas,\n        xScale,\n        yScale,\n        layer,\n        animationDuration,\n        onMouseOver,\n        onMouseOut,\n        onClick,\n        color,\n        height,\n        width,\n    ]);\n\n    return null;\n}\n","import React from \"react\";\n\nimport { withCanvas, withSVG, withXYPlot } from \"../../../../hoc\";\n\nimport { ColumnBase, IColumnBaseProps } from \"./ColumnBase\";\n\nexport interface IColumnProps extends Omit<IColumnBaseProps, \"layer\" | \"canvas\"> {\n    /**\n     * Should Canvas be used instead of SVG?\n     */\n    useCanvas?: boolean;\n}\n\nconst CanvasColumn = withCanvas(withXYPlot<IColumnProps>(ColumnBase), \"plot column\");\nconst SVGColumn = withSVG(withXYPlot<IColumnProps>(ColumnBase), \"plot column\");\n\n/**\n * Represents a Column plot\n * @param  useCanvas   Should Canvas be used instead of SVG?\n * @param  props       The set of React properties\n * @return             The Column plot component\n */\nexport function Column({ useCanvas = false, ...props }: IColumnProps) {\n    if (useCanvas) {\n        return <CanvasColumn {...props} />;\n    }\n\n    return <SVGColumn {...props} />;\n}\n\nColumn.requiresVirtualCanvas = true;\nColumn.isPlot = true;\nColumn.brush = {\n    horizontal: true,\n    vertical: false,\n};\nColumn.zoom = {\n    horizontal: true,\n    vertical: false,\n};\n","export * from \"./Column\";\nexport * from \"./ColumnBase\";\n","import { chartSelectors, column, d3, IState } from \"@chart-io/core\";\nimport type { IColor, IEventPlotProps } from \"@chart-io/core\";\n\nimport { useSelector } from \"react-redux\";\n\nimport { useLegendItems, useRender } from \"../../../../hooks\";\n\nimport { renderCanvas } from \"../../renderCanvas\";\nimport { useFocused } from \"../useFocused\";\nimport { useTooltip } from \"../useTooltip\";\n\nexport interface IStackedColumnBaseProps extends Omit<IEventPlotProps, \"y\"> {\n    /**\n     * This is an internally used function to allow the scatter plot to render to a virtual canvas\n     */\n    renderVirtualCanvas?: (update: d3.Transition<Element, unknown, any, unknown>) => void;\n    /**\n     * The set of y fields to use to access the data for each plot\n     */\n    ys: Array<string>;\n\n    /**\n     * The set of colors to use for the different plot\n     */\n    colors?: Array<IColor>;\n}\n\n/**\n * Represents a Column Plot\n * @param  props       The set of React properties\n * @return             The Column plot component\n */\nexport function StackedColumnBase({\n    x,\n    ys,\n    colors,\n    scaleMode = \"plot\",\n    showInLegend = true,\n    interactive = true,\n    onMouseOver,\n    onMouseOut,\n    onClick,\n    layer,\n    canvas,\n    renderVirtualCanvas,\n}: IStackedColumnBaseProps) {\n    const data = useSelector((s: IState) => chartSelectors.data(s));\n    const height = useSelector((s: IState) => chartSelectors.dimensions.height(s));\n    const width = useSelector((s: IState) => chartSelectors.dimensions.width(s));\n    const xScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, x, scaleMode));\n    const yScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, ys[0], scaleMode));\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const animationDuration = useSelector((s: IState) => chartSelectors.animationDuration(s));\n\n    const onTooltip = useTooltip({ x });\n    const onFocus = useFocused({ xScale, theme, grouped: false });\n\n    useLegendItems(ys, \"square\", showInLegend, colors);\n\n    // prettier-ignore\n    useRender(() => {\n        const { update } = column.stacked.render({\n            animationDuration,\n            interactive,\n            layer: layer.current,\n            data,\n            colors,\n            onMouseOver,\n            onMouseOut,\n            onClick,\n            onFocus,\n            onTooltip,\n            theme,\n            x,\n            ys,\n            xScale,\n            yScale,\n        });\n\n        // @ts-ignore: TODO: Work out how to fix this\n        renderCanvas(canvas, renderVirtualCanvas, width, height, update);\n    }, [x, ys, data, xScale, yScale, layer, animationDuration, onMouseOver, onMouseOut, onClick]);\n\n    return null;\n}\n","import { chartSelectors, IState } from \"@chart-io/core\";\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { withCanvas, withSVG, withXYPlot } from \"../../../../hoc\";\n\nimport { IStackedColumnBaseProps, StackedColumnBase } from \"./StackedColumnBase\";\n\nexport interface IStackedColumnProps extends Omit<IStackedColumnBaseProps, \"interactive\" | \"layer\"> {\n    /**\n     * Should Canvas be used instead of SVG?\n     */\n    useCanvas?: boolean;\n}\n\nconst StackedCanvasColumn = withCanvas(withXYPlot<IStackedColumnProps>(StackedColumnBase), \"plot stacked-column\");\nconst StackedSVGColumn = withSVG(withXYPlot<IStackedColumnProps>(StackedColumnBase), \"plot stacked-column\");\n\n/**\n * Represents a Column plot\n * @param  useCanvas   Should Canvas be used instead of SVG?\n * @param  props       The set of React properties\n * @return             The Column plot component\n */\nexport function StackedColumn({ useCanvas, colors, ...props }: IStackedColumnProps) {\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const palette = colors || theme.series.colors;\n\n    if (useCanvas) {\n        return <StackedCanvasColumn {...props} colors={palette} />;\n    }\n\n    return <StackedSVGColumn {...props} colors={palette} />;\n}\n\nStackedColumn.requiresVirtualCanvas = true;\nStackedColumn.isPlot = true;\nStackedColumn.brush = {\n    horizontal: true,\n    vertical: false,\n};\nStackedColumn.zoom = {\n    horizontal: true,\n    vertical: false,\n};\n","export * from \"./StackedColumn\";\nexport * from \"./StackedColumnBase\";\n","import { chartSelectors, column, d3, IState } from \"@chart-io/core\";\nimport type { IColor, IEventPlotProps } from \"@chart-io/core\";\n\nimport { useSelector } from \"react-redux\";\n\nimport { useLegendItems, useRender } from \"../../../../hooks\";\n\nimport { renderCanvas } from \"../../renderCanvas\";\nimport { useFocused } from \"../useFocused\";\nimport { useTooltip } from \"../useTooltip\";\n\nexport interface IGroupedColumnBaseProps extends Omit<IEventPlotProps, \"y\"> {\n    /**\n     * This is an internally used function to allow the scatter plot to render to a virtual canvas\n     */\n    renderVirtualCanvas?: (update: d3.Transition<Element, unknown, any, unknown>) => void;\n    /**\n     * The set of y fields to use to access the data for each plot\n     */\n    ys: Array<string>;\n\n    /**\n     * The set of colors to use for the different plot\n     */\n    colors?: Array<IColor>;\n}\n\n/**\n * Represents a Groupled Column Plot\n * @param  props       The set of React properties\n * @return             The Column plot component\n */\nexport function GroupedColumnBase({\n    x,\n    ys,\n    colors,\n    scaleMode = \"plot\",\n    showInLegend = true,\n    interactive = true,\n    onMouseOver,\n    onMouseOut,\n    onClick,\n    layer,\n    canvas,\n    renderVirtualCanvas,\n}: IGroupedColumnBaseProps) {\n    const data = useSelector((s: IState) => chartSelectors.data(s));\n    const height = useSelector((s: IState) => chartSelectors.dimensions.height(s));\n    const width = useSelector((s: IState) => chartSelectors.dimensions.width(s));\n    const xScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, x, scaleMode));\n    const yScale = useSelector((s: IState) => chartSelectors.scales.getScale(s, ys[0], scaleMode));\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const animationDuration = useSelector((s: IState) => chartSelectors.animationDuration(s));\n\n    const onTooltip = useTooltip({ x });\n    const onFocus = useFocused({ xScale, theme, grouped: true });\n\n    useLegendItems(ys, \"square\", showInLegend, colors);\n\n    useRender(() => {\n        const { update } = column.grouped.render({\n            animationDuration,\n            interactive,\n            layer: layer.current,\n            data,\n            colors,\n            onMouseOver,\n            onMouseOut,\n            onClick,\n            onFocus,\n            onTooltip,\n            theme,\n            x,\n            ys,\n            xScale,\n            yScale,\n        });\n\n        // @ts-ignore: TODO: Work out how to fix this\n        renderCanvas(canvas, renderVirtualCanvas, width, height, update);\n    }, [x, ys, data, xScale, yScale, layer, animationDuration, onMouseOver, onMouseOut, onClick]);\n\n    return null;\n}\n","import { chartSelectors, IState } from \"@chart-io/core\";\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { withCanvas, withSVG, withXYPlot } from \"../../../../hoc\";\n\nimport { GroupedColumnBase, IGroupedColumnBaseProps } from \"./GroupedColumnBase\";\n\nexport interface IGroupedColumnProps extends Omit<IGroupedColumnBaseProps, \"interactive\" | \"layer\"> {\n    /**\n     * Should Canvas be used instead of SVG?\n     */\n    useCanvas?: boolean;\n}\n\nconst GroupedCanvasColumn = withCanvas(withXYPlot<IGroupedColumnProps>(GroupedColumnBase), \"plot grouped-column\");\nconst GroupedSVGColumn = withSVG(withXYPlot<IGroupedColumnProps>(GroupedColumnBase), \"plot grouped-column\");\n\n/**\n * Represents a Column plot\n * @param  useCanvas   Should Canvas be used instead of SVG?\n * @param  props       The set of React properties\n * @return             The Column plot component\n */\nexport function GroupedColumn({ useCanvas = false, colors, ...props }: IGroupedColumnProps) {\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const palette = colors || theme.series.colors;\n\n    if (useCanvas) {\n        return <GroupedCanvasColumn {...props} colors={palette} />;\n    }\n\n    return <GroupedSVGColumn {...props} colors={palette} />;\n}\n\nGroupedColumn.requiresVirtualCanvas = true;\nGroupedColumn.isPlot = true;\nGroupedColumn.brush = {\n    horizontal: true,\n    vertical: false,\n};\nGroupedColumn.zoom = {\n    horizontal: true,\n    vertical: false,\n};\n","export * from \"./GroupedColumn\";\nexport * from \"./GroupedColumnBase\";\n","import { chartSelectors, IState, logAndThrowError } from \"@chart-io/core\";\nimport type { IPlotsProps } from \"@chart-io/core\";\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { Column } from \"./Column\";\nimport { GroupedColumn } from \"./GroupedColumn\";\nimport { StackedColumn } from \"./StackedColumn\";\n\nexport interface IColumnsProps extends IPlotsProps {\n    /**\n     * Should the column plots be stacked based on the x-value?\n     */\n    stacked?: boolean;\n    /**\n     * Should the column plots be grouped based on the x-value?\n     */\n    grouped?: boolean;\n}\n\n/**\n * Represents a set of Column Plots\n * @param  props       The set of React properties\n * @return             The Column plot component\n */\nexport function Columns({ ys, colors, stacked = false, grouped = false, ...props }: IColumnsProps) {\n    const theme = useSelector((s: IState) => chartSelectors.theme(s));\n    const palette = colors || theme.series.colors;\n\n    if (stacked && grouped) {\n        logAndThrowError(\"E003\", \"Column plots do not support both being stacked and grouped\");\n    }\n\n    if (!stacked && !grouped) {\n        logAndThrowError(\"E004\", \"Multiple Column plots must be either stacked or grouped\");\n    }\n\n    if (stacked) {\n        return <StackedColumn ys={ys} colors={palette} {...props} />;\n    }\n\n    if (grouped) {\n        return <GroupedColumn ys={ys} colors={palette} {...props} />;\n    }\n\n    return (\n        <React.Fragment>\n            {ys.map((y, i) => (\n                <Column {...props} key={y} y={y} color={palette[i]} />\n            ))}\n        </React.Fragment>\n    );\n}\n\nColumns.requiresVirtualCanvas = true;\nColumns.isPlot = true;\nColumns.brush = {\n    horizontal: true,\n    vertical: false,\n};\nColumns.zoom = {\n    horizontal: true,\n    vertical: false,\n};\n"],"names":["cov_2kz4fvi933","s","useTooltip","x","f","dispatch","datum","setDatum","useState","colors","setColors","ys","setYs","positionEvent","setPositionEvent","useEffect","column","tooltip","event","cov_2kx2rv2sir","path","hash","global","gcv","coverageData","coverage","actualCoverage","ColumnBase","y","canvas","renderVirtualCanvas","color","scaleMode","b","showInLegend","interactive","onMouseOver","onMouseOut","onClick","layer","data","useSelector","chartSelectors","width","dimensions","height","xScale","scales","getScale","yScale","theme","animationDuration","fillColor","d3","series","opacity","useLegendItem","onTooltip","onFocus","useFocused","grouped","useRender","update","render","current","CanvasColumn","cov_1g9pcy5rj7","withCanvas","withXYPlot","SVGColumn","withSVG","cov_1f8qsiz534","cov_1cqcyu2ff0","StackedColumnBase","StackedCanvasColumn","cov_2m59u9geri","StackedSVGColumn","cov_2ju2sbpuno","cov_qg6i25mhl","GroupedColumnBase","GroupedCanvasColumn","cov_1lczjwy7ly","GroupedSVGColumn","cov_1266cjxza6","Columns","stacked","cov_1j59xibrvq","props","palette","logAndThrowError"],"mappings":"+4KAGA,EAiBkCA,EAAA,EAAAC,EAoBtB,CAAA,IAAA,MACJC,EAAAA,CAAA,CAAAC,EAAAA,CAAA,IAAA,CAAAH,EAAA,EAAAI,OAEA,KAAM,CAAEC,SAAAA,CAAAC,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,KAER,CAAAA,EAAoBC,CAAA,GAAAP,EAAA,EAAAC,EAAAO,CAAAA,IAAAA,EAAA,SAAA,IAAA,GACpB,CAAAC,EAAAC,CAAsB,GAAAV,EAAA,EAAAC,EAAA,CAAA,IAAAO,EAAAA,SAAA,IAAA,GAChBG,CAAEA,EAAAC,CAAA,GAAAZ,IAAAC,EAAAO,CAAAA,IAAAA,EAAA,SAAA,IAAA,GACR,CAAAK,EAAcC,CAAA,GAAAd,EAAA,EAAAC,EAAAO,CAAAA,IAAAA,EAAA,SAAA,IAAA,GAAAR,OAAAA,EAAAC,EAAAA,OAEtBc,EAAAA,UAAA,KAAAf,EAAA,EAAAI,EAAA,CAAA,IAAAJ,EAAAC,EAAAA,EAES,CAAA,IAAAe,EAAAC,QAAA,CAAAZ,SAAAA,EAAAC,MAAAA,EAAAG,OAAAA,EAAAS,MAAAL,EAAAV,EAAAA,EAAAQ,GAAAA,CAAA,CAAA,qUCFL,SAAAQ,GAAA,CAAA,IAAAC,EAAA,2GAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,2GAAA,aaAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,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EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,oBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,E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CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,oBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAA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"}