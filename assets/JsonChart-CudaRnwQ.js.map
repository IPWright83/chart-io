{"version":3,"file":"JsonChart-CudaRnwQ.js","sources":["../../src/lib/components/JsonChart/JsonChart.tsx"],"sourcesContent":["import React, { forwardRef } from \"react\";\nimport type { IData } from \"@chart-io/core\";\n\nimport { Areas, Bars, Columns, Lines, Scatters } from \"../Plots\";\nimport type { IXAxisProps, IYAxisProps } from \"../Axis\";\nimport { XAxis, YAxis } from \"../Axis\";\nimport { IChartRef } from \"../Chart\";\nimport type { IXYChartProps } from \"../XYChart\";\nimport { useArray } from \"../../hooks\";\nimport { XYChart } from \"../XYChart\";\n\nimport type { ISeriesConfig } from \"./ISeriesConfig\";\n\nexport interface IJsonChartProps {\n    config: {\n        /**\n         * The config options for the main chart component\n         */\n        chart: Omit<IXYChartProps, \"data\">;\n        /**\n         * The config options for the series\n         */\n        series: ISeriesConfig;\n        /**\n         * The config options for the axis\n         */\n        axis: {\n            /**\n             * Configuration for the X-Axis\n             */\n            x?: IXAxisProps;\n            /**\n             * Configuration for the Y-Axis\n             */\n            y?: IYAxisProps;\n        };\n    };\n\n    /**\n     * The data for the chart\n     */\n    data?: IData;\n}\n\n/**\n * Represents an XYChart that can be configured via a serializable JSON string. It is worth noting\n * that some features (e.g. event handlers) will need to by manually applied as these can't be\n * serialised to JSON\n * @param  props        The set of React properties\n * @return              The JsonChart component\n */\nexport const JsonChart = forwardRef<IChartRef, IJsonChartProps>(({ config, data }: IJsonChartProps, ref) => {\n    const { chart, series, axis } = config;\n    const { lines, areas, scatters, bars, columns } = series;\n\n    // Automatically determine the fields from the plots themselves\n    const xPlotFields = bars?.xs;\n    const yPlotFields = [...(lines?.ys ?? []), ...(areas?.ys ?? []), ...(scatters?.ys ?? []), ...(columns?.ys ?? [])];\n\n    // Grab any explicitly set fields\n    const xs = useArray(axis.x?.fields ?? xPlotFields);\n    const ys = useArray(axis.y?.fields ?? yPlotFields);\n\n    return (\n        <XYChart ref={ref} data={data} {...chart}>\n            {!!xs && <XAxis fields={xs} {...(axis.x ?? {})} />}\n            {!!ys && <YAxis fields={ys} {...(axis.y ?? {})} />}\n            {!!lines && <Lines x={xs[0]} ys={lines.ys} colors={lines.colors} interactive={lines.interactive} />}\n            {!!areas && (\n                <Areas\n                    x={xs[0]}\n                    ys={areas.ys}\n                    colors={areas.colors}\n                    interactive={areas.interactive}\n                    stacked={areas.stacked}\n                />\n            )}\n            {!!scatters && (\n                <Scatters\n                    x={xs[0]}\n                    ys={scatters.ys}\n                    colors={scatters.colors}\n                    interactive={scatters.interactive}\n                    radius={scatters.radius}\n                />\n            )}\n            {!!columns && (\n                <Columns\n                    x={xs[0]}\n                    ys={columns.ys}\n                    colors={columns.colors}\n                    interactive={columns.interactive}\n                    stacked={columns.stacked}\n                    grouped={columns.grouped}\n                />\n            )}\n            {!!bars && (\n                <Bars\n                    xs={bars.xs}\n                    y={ys[0]}\n                    colors={bars.colors}\n                    interactive={bars.interactive}\n                    stacked={bars.stacked}\n                    grouped={bars.grouped}\n                />\n            )}\n        </XYChart>\n    );\n});\n\nJsonChart.displayName = \"JsonChart\";\n"],"names":["JsonChart","cov_1lzbk5d6q0","s","forwardRef","config","data","ref","f","chart","series","axis","lines","areas","scatters","bars","columns","xPlotFields","xs","yPlotFields","b","ys","useArray","x","fields","y"],"mappings":"03KAiGiB,MAAAA,GAAAC,EAAA,EAAAC,EAAA,CAAA,IAAAC,EAAA,WAAA,CAAA,CAAAC,OAAAA,EAAAC,KAAAA,CAAA,EAAAC,IAAA,SAAAL,IAAAM,EAAA,CAAA,IACY,KAAAC,CAAAA,MAAAA,EAAAC,OAAAA,EAAAC,KAAAA,CAAA,GAAAT,EAAA,EAAAC,EAAA,CAAA,IAAAE,GACFO,CAAAA,MAAAA,EAAAC,MAAAA,EAAAC,SAAAA,EAAAC,KAAAA,EAAAC,QAAAA,CAAA,GAAAd,EAAA,EAAAC,EAAAO,CAAAA,IAAAA,GAGOO,GAAAf,IAAAC,EAAAY,CAAAA,IAAAA,GAAAA,YAAAA,EAAAG,IACAC,GAAAjB,EAAA,EAAAC,EAAA,CAAA,IAAA,CAAA,IAAAD,IAAAkB,EAAA,CAAA,EAAA,CAAA,KAAAR,GAAAA,YAAAA,EAAAS,MAAAnB,EAAA,EAAAkB,EAAA,CAAA,EAAA,CAAA,IAAA,CAAA,IAAA,IAAAlB,EAAA,EAAAkB,EAAA,CAAA,EAAA,CAAA,KAAAP,GAAAA,YAAAA,EAAAQ,MAAAnB,EAAA,EAAAkB,EAAAlB,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,IAAAA,IAAAA,EAAA,EAAAkB,EAAAN,CAAAA,EAAAA,CAAAA,KAAAA,GAAAA,YAAAA,EAAAO,MAAAnB,EAAA,EAAAkB,EAAAlB,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,IAAAA,IAAAA,IAAAkB,EAAAJ,CAAAA,EAAAA,CAAAA,KAAAA,GAAAA,YAAAA,EAAAK,MAAAnB,EAAA,EAAAkB,EAKlC,CAAA,EAAA,CAAA,IAAA,CAAA,GAAA,GAAAF,GAAAhB,EAAA,EAAAC,EAAA,CAAA,IAAAmB,GAAApB,EAAA,EAAAkB,EAAA,CAAA,EAAA,CAAA,MAAAT,EAAAA,EAAAY,IAAAZ,YAAAA,EAAAa,UAAAtB,EAAA,EAAAkB,EAAA,CAAA,EAAA,CAAA,IAAAH,GAAA,GAEAI,GAAAnB,IAAAC,EAAAmB,CAAAA,IAAAA,GAAApB,EAAAkB,EAAAA,YAAAT,EAAAA,EAAAc,IAAAd,YAAAA,EAAAa,UAAAtB,EAAA,EAAAkB,EAAA,CAAA,EAAA,CAAA,IAAAD,GAAA,GAAAjB,OAAAA,EAAA,EAAAC,EAAA,CAAA;;"}