---
name: On Push to Master

on:
  push:
    branches:
      - "master"

jobs:
  unit:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2.2.2
        with:
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: pnpm Install
        run: pnpm install
      - name: Run Unit Tests
        run: pnpm test

  changesets_version:
    needs: [unit]
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    outputs:
      published: ${{ steps.release.published }}
      published2: ${{ steps.foo.published }}
    #   hasChangesets: ${{ steps.release.hasChangesets }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.DEPLOY_TOKEN }}
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2.2.2
        with:
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: pnpm Install
        run: pnpm install
      - name: Build
        run: pnpm build
      - name: Release
        id: release
        uses: changesets/action@v1
        with:
          publish: pnpm run publish
          version: pnpm run version
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Update output
        id: foo
        if: steps.release.outputs.published == 'true'
        run: echo "published=true" >> "$GITHUB_OUTPUT"

  # changesets_version:
  #   runs-on: ubuntu-latest
  #   needs: [lint, unit]
  #   if: "!contains(github.event.head_commit.message, 'ci skip')"
  #   outputs:
  #     changes: ${{ steps.version.outputs.changes }}
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         token: ${{ secrets.DEPLOY_TOKEN }}
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 16
  #     - uses: pnpm/action-setup@v2.2.2
  #       with:
  #         run_install: false
  #     - name: Get pnpm store directory
  #       id: pnpm-cache
  #       run: |
  #         echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
  #     - uses: actions/cache@v3
  #       name: Setup pnpm cache
  #       with:
  #         path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
  #         key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pnpm-store-
  #     - name: pnpm Install
  #       run: pnpm install
  #     - name: changeset version
  #       id: version
  #       run: echo ::set-output name=changes::$(pnpm bump 2>&1 | grep -q 'No unreleased changesets found' && echo 'false' || echo 'true')
  #     - name: Update lockfile
  #       if: steps.version.outputs.changes == 'true'
  #       run: pnpm install --no-frozen-lockfile
  #     - name: Push changes
  #       if: steps.version.outputs.changes == 'true'
  #       run: |
  #         git config user.email ipwright83+dev@gmail.com
  #         git config user.name "Ian Wright"
  #         git add -A
  #         git commit -m "Version packages" || echo "No changes to commit"
  #         git push --follow-tags

  debug_changesets:
    needs: changesets_version
    # if: "needs.changesets_version.outputs.hasChangesets == false"
    runs-on: ubuntu-latest
    steps:
      - name: Log
        run: echo "debug_changesets running"
      - run: echo ${{ needs.changesets_version.steps.release.outputs.hasChangesets }}
      - run: echo ${{ needs.changesets_version.steps.release.outputs.changes }}
      - run: echo ${{ needs.changesets_version.release.outputs.published }}
      - run: echo ${{ needs.changesets_version.outputs.published }}
      - run: echo ${{ needs.changesets_version.outputs.published2 }}

  deploy_storybook:
    needs: changesets_version
    if: "needs.changesets_version.outputs.hasChangesets == false"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2.2.2
        with:
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: pnpm Install
        run: pnpm install
      - name: Deploy
        run: pnpm storybook:deploy
        env:
          GH_TOKEN: ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}

  update_chromatic_baseline:
    needs: changesets_version
    if: "needs.changesets_version.outputs.hasChangesets == false"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.DEPLOY_TOKEN }}
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2.2.2
        with:
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: pnpm Install
        run: pnpm install
      - name: Chromatic
        run: |
          cd packages/react
          npx chromatic --project-token ${{ secrets.CHROMATIC_PROJECT_TOKEN }} --exit-zero-on-changes --auto-accept-changes
